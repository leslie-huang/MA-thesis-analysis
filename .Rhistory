}
FARC_breaks <- get_breakdate(break_finder(FARC_results), FARC_results)
govt_breaks <- get_breakdate(break_finder(govt_results), govt_results)
joint_breaks <- get_breakdate(break_finder(joint_results), joint_results)
# Now get the breakpoints into a list we can graph
# convert breaks to a df
convert_breaks <- function(listoflists) {
df <- as.data.frame(unlist(listoflists))
df$group <- NA
# now fill in by type
negs <- rep("neg_break", length(listoflists[[1]]))
poss <- rep("pos_break", length(listoflists[[2]]))
pp3 <- rep("pp3_break", length(listoflists[[3]]))
death <- rep("death_break", length(listoflists[[4]]))
groups <- c(negs, poss, pp3, death)
df$group <- groups
df <- na.omit(df)
colnames(df)[1] <- "date"
df$date <- as.Date(df$date, origin = "1970-01-01")
return(df)
}
# get the dataframes of breaks, sorted by F/G/J stream
FARC_breaks_df <- convert_breaks(FARC_breaks)
govt_breaks_df <- convert_breaks(govt_breaks)
joint_breaks_df <- convert_breaks(joint_breaks)
# Function to make dataframe of all breaks of a type (e.g. neg)
break_sorter <- function(a,b,c,d) {
df1 <- filter(a, group == d)
if (nrow(df1) != 0) {
df1$group <- "FARC"
}
df2 <- filter(b, group == d)
if (nrow(df2) != 0) {
df2$group <- "govt"
}
df3 <- filter(c, group == d)
if (nrow(df3) != 0) {
df3$group <- "joint"
}
df <- rbind(df1, df2, df3)
if (nrow(df) > 0) {
return(df)
}
}
neg_breaks <- break_sorter(FARC_breaks_df, govt_breaks_df, joint_breaks_df, "neg_break")
pos_breaks <- break_sorter(FARC_breaks_df, govt_breaks_df, joint_breaks_df, "pos_break")
pp3_breaks <- break_sorter(FARC_breaks_df, govt_breaks_df, joint_breaks_df, "pp3_break")
death_breaks <- break_sorter(FARC_breaks_df, govt_breaks_df, joint_breaks_df, "death_break")
#################################################################################
#################################################################################
# Let's look at violence
# let's find the structural breaks ** ignore the "day"
viol_breaks <- get_breakdate(break_finder(monthly_viol), monthly_viol)
# Function to make list of violence breaks with categorical var for the measure of violence
convert_vbreaks <- function(listoflists) {
df <- as.data.frame(unlist(listoflists))
df$group <- NA
# now fill in by type
farc_actions <- rep("farc_action", length(listoflists[[1]]))
casualties <- rep("casualties", length(listoflists[[2]]))
desmovilizados <- rep("desmovilizados", length(listoflists[[3]]))
groups <- c(farc_actions, casualties, desmovilizados)
df$group <- groups
df <- na.omit(df)
colnames(df)[1] <- "date"
df$date <- as.Date(df$date, origin = "1970-01-01")
return(df)
}
# get structural breaks in violence trends for graphing
viol_breaks_list <- convert_vbreaks(viol_breaks)
#################################################################################
#################################################################################
# TIME SERIES ANALYSIS
#################################################################################
#################################################################################
# let's check out these time series of data
# ADF tests for stationarity
sapply(monthly_viol[2:4], function(x) {summary(ur.df(na.omit(x), type = "trend", lags = 1))})
# Results: FARC actions / casualties / demobilization: unit root, trend, and drift / unit root, trend, and drift / unit root, no trend, no drift
sapply(monthly_viol[2:4], function(x) {summary(ur.df(na.omit(x), type = "drift", lags = 1))})
# FARC actions / casualties / demobilization: can't reject null / reject null / reject null: unit root, and no drift
sapply(monthly_viol[2:4], function(x) {summary(ur.df(na.omit(x), type = "none", lags = 1))})
# FARC actions / casualties / demobilization: reject null / can't reject / can't reject
# KPSS
sapply(monthly_viol[2:4], function(x) {kpss.test(x, null = "T")})
# check ndiffs: 1 differencing needed for each trend to make stationary
sapply(monthly_viol[2:4], function(x) { ndiffs(x)})
# Now let's see if FARC actions and army casualties are cointegrated.
viol_VAR <- VAR(na.omit(monthly_viol[,2:3]), p = 2, type = "both")
# test for serial correlation of residuals. Increase lags p = 2 in the VAR model to get p val = 0.94: no autocorrelation
serial.test(viol_VAR)
# Now let's run the Johansen cointgration test
summary(ca.jo(na.omit(monthly_viol[,2:3]), type = "trace", K = 2, ecdet = "trend"))
# result: cointegration
# test Granger causality both ways
# significant only when lags = 3, with p = 0.01
grangertest(na.omit(monthly_viol[,2]) ~ na.omit(monthly_viol[,3]), order = 3)
# significant with p = 0.0007
grangertest(na.omit(monthly_viol[,3]) ~ na.omit(monthly_viol[,2]), order = 1)
# result: army deaths are Granger caused by FARC actions
#################################################################################
#################################################################################
# Comparison of means: let's look at the means before and after structural breaks
# Function to calculate means in each type of sentiment during "regimes" bounded by structural breaks. Takes two arguments: df of dates with a group ID of break type, and df of loess values. Returns one argument: list of lists of Sentiment Type, Breakdate, and Means
calculate_breakmeans <- function(df, loessed) {
# need to rename groups so they match up with columns in the loess df
df$group <- gsub("neg_break", "EmoNeg", df$group)
df$group <- gsub("pos_break", "EmoPos", df$group)
df$group <- gsub("pp3_break", "Ellos", df$group)
df$group <- gsub("death_break", "Muerte", df$group)
# which types of sentiment have breaks?
groups <- distinct(df, group)$group
# list to contain the means for each sentiment
listofmeans <- vector("list", length(groups))
# for each type of sentiment
for (i in 1:length(groups)) {
# get the breakdates for that type
breaks <- filter(df, group == groups[i])
# get the name of the type
senti_name <- groups[i]
# get the correct columns from the loess df, supplied as an argument to the function
data <- cbind(loessed["date"], loessed[senti_name])
# number of structural breaks
break_len <- length(breaks[[1]])
# IDs to return
IDs <- list(senti_name, breaks["date"])
# Case #1: 2 breaks, 3 regimes
if (break_len == 2) {
data1 <- filter(data, date < breaks[1,1])
mean1 <- mean(unlist(data1[senti_name]))
data2 <- filter(data, date >= breaks[1,1], date < breaks[2,1])
mean2 <- mean(unlist(data2[senti_name]))
data3 <- filter(data, date >= breaks[2,1])
mean3 <- mean(unlist(data3[senti_name]))
means <- c(mean1, mean2, mean3)
}
# Case #2: only 1 break, 2 regimes
else {
data1 <- filter(data, date < breaks[1,1])
mean1 <- mean(unlist(data1[senti_name]))
data2 <- filter(data, date >= breaks[1,1])
mean2 <- mean(unlist(data2[senti_name]))
means <- c(mean1, mean2)
}
listofmeans[[i]] <- list(IDs, means)
}
return(listofmeans)
}
#################################################################################
#################################################################################
# get all the means of regimes defined by structural breakpoints in emotion
FARC_means <- calculate_breakmeans(FARC_breaks_df, FARC_results)
govt_means <- calculate_breakmeans(govt_breaks_df, govt_results)
joint_means <- calculate_breakmeans(joint_breaks_df, joint_results)
neg_breaks_gg
pos_breaks_gg
ellos_breaks_gg
death_breaks_gg
#################################################################################
#################################################################################
# now let's do the same for structural breaks in the violence time series
# modified version of the breakmeans function
calculate_viol_breakmeans <- function(df, loessed) {
loessed <- na.omit(loessed)
df$group <- gsub("farc_action", "FARC_actions", df$group)
df$group <- gsub("casualties", "deaths_fuerzapublica", df$group)
# which types of sentiment have breaks?
groups <- distinct(df, group)$group
# list to contain the means for each sentiment
listofmeans <- vector("list", length(groups))
# for each type of sentiment
for (i in 1:length(groups)) {
# get the breakdates for that type
breaks <- filter(df, group == groups[i])
# get the name of the type
senti_name <- groups[i]
# get the correct columns from the loess df, supplied as an argument to the function
data <- cbind(loessed["date"], loessed[senti_name])
# IDs to return
IDs <- list(senti_name, breaks["date"])
data1 <- filter(data, date < breaks[1,1])
mean1 <- mean(unlist(data1[senti_name]))
data2 <- filter(data, date >= breaks[1,1], date < breaks[2,1])
mean2 <- mean(unlist(data2[senti_name]))
data3 <- filter(data, date >= breaks[2,1])
mean3 <- mean(unlist(data3[senti_name]))
means <- c(mean1, mean2, mean3)
listofmeans[[i]] <- list(IDs, means)
}
return(listofmeans)
}
viol_means <- calculate_viol_breakmeans(viol_breaks_list, monthly_viol)
viol_breaks_gg
#################################################################################
#################################################################################
# Introducing... public opinion
public_op <- read.csv("../MA-datasets/public opinion.csv", stringsAsFactors = FALSE)
public_op <- public_op[,1:3]
public_op$date <- as.Date(as.yearmon(public_op$date, "%Y-%m"))
public_op[,2:3] <- sapply(public_op[,2:3], function(x) { as.numeric(x)})
public_op <- subset(public_op, select = c(2:3, 1))
# graph it
base_opinion = ggplot(public_op, aes(x = as.Date(date, origin = "1970-01-01"), y = santos_positive_image, color = "Positive image of Pres. Santos")) +
geom_smooth(method = "loess", se = FALSE) +
geom_jitter() +
geom_point(data = public_op, aes(x = as.Date(date, origin = "1970-01-01"), y = approve_santos_decision_talks, color = "Approve of negotiations with guerrillas")) +
geom_smooth(method = "loess", se = FALSE, data = public_op, aes(x = as.Date(date, origin = "1970-01-01"), y = approve_santos_decision_talks, color = "Approve of negotiations with guerrillas")) +
labs(
x = "Date",
y = "Percent Approve/Positive Image",
color = "Legend") +
scale_x_date(date_minor_breaks = "1 month",
limits = c(as.Date("2012-01-01", "%Y-%m-%d"), NA)) +
ggtitle("Public Opinion")
# public opinion and ceasefires
opinion_cf = base_opinion +
ggtitle("Public Opinion and Ceasefires") +
geom_rect(aes(xmin=cf_start[1], xmax=cf_end[1], ymin=-Inf, ymax=Inf), fill = "yellow", linetype = 0, alpha = 0.01) +
geom_rect(aes(xmin=cf_start[2], xmax=cf_end[2], ymin=-Inf, ymax=Inf), fill = "yellow", linetype = 0, alpha = 0.01) +
geom_rect(aes(xmin=cf_start[3], xmax=cf_end[3], ymin=-Inf, ymax=Inf), fill = "yellow", linetype = 0, alpha = 0.01) +
geom_rect(aes(xmin=cf_start[4], xmax=cf_end[4], ymin=-Inf, ymax=Inf), fill = "yellow", linetype = 0, alpha = 0.01) +
geom_rect(aes(xmin=cf_start[5], xmax=cf_end[5], ymin=-Inf, ymax=Inf), fill = "yellow", linetype = 0, alpha = 0.01)
# public opinion and major events
opinion_major = base_opinion +
ggtitle("Major Events and Public Opinion Trends") +
geom_vline(data = filter(dates, group == "major_agree"), mapping = aes(xintercept = as.numeric(date), color = "Major agreement"), linetype = 2) +
geom_vline(data = filter(dates, group == "major_viol"), mapping = aes(xintercept = as.numeric(date), color = "Major violence"), linetype = 1)
# get breakdates in public opinion
opinion_breakd <- get_breakdate(break_finder(na.omit(public_op)), public_op)
#################################################################################
#################################################################################
# Function takes 1 parameter: a dataframe, and returns one parameter with monthly stats for violence and public opinion added: a dataframe
add_monthlies <- function(df) {
dates <- df["date"]
# add columns for the monthly data we're adding
col_names <- c("FARC_actions", "army_casualties", "pres_approve", "peace_approve")
df[, col_names] <- NA
for (i in 1:length(dates[[1]])) {
date <- dates[i, 1]
year <- format(date, "%Y")
month <- format(date, "%m")
monthly_date <- as.Date(paste(year, month, "01", sep = "-"))
# get the stats from violence and opinion dfs
viol <- filter(monthly_viol, date == monthly_date)
public <- filter(public_op, date == monthly_date)
# write them to new df
df["FARC_actions"][i, 1] <- as.numeric(viol[1])
df["army_casualties"][i, 1] <- as.numeric(viol[2])
df["pres_approve"][i, 1] <- as.numeric(public[1])
df["peace_approve"][i, 1] <- as.numeric(public[2])
}
return(df)
}
#################################################################################
#################################################################################
# Markov models
# Hidden Markov model: FARC
# let's limit it to just 3 sentiment measures
FARC_results1 <- FARC_results[, -4]
# formulas for the model
forms1 <- list(FARC_results1$EmoNeg ~ 1, FARC_results1$EmoPos ~ 1, FARC_results1$Ellos ~ 1)
num_states <- seq(2, 10, by = 1)
BIC_vals <- sapply(num_states, function(x) {BIC(depmix(forms1, family = list(gaussian(), gaussian(), gaussian()), nstates = x, data = FARC_results1))})
BIC_df <- data.frame(cbind(num_states, BIC_vals))
# plot the BIC values to select the optimal number of states
BIC_plot <- ggplot(BIC_df, aes(x = num_states, y = BIC_vals)) +
geom_point() +
ggtitle("BIC Values for n = 2:10 Latent States HMM")
BIC_plot
BIC_vals
FARC_results1
depmix(forms1, family = list(gaussian(), gaussian(), gaussian()), nstates = 2, data = FARC_results1)
num_states <- seq(2, 10, by = 1)
BIC_vals <- sapply(num_states, function(x) {BIC(depmix(forms1, family = list(gaussian(), gaussian(), gaussian()), nstates = x, data = FARC_results1))})
BIC_df <- data.frame(cbind(num_states, BIC_vals))
BIC_df
BIC(depmix(forms1, family = list(gaussian(), gaussian(), gaussian()), nstates = 2, data = FARC_results1))
forms1
FARC_results2 <- add_monthlies(FARC_results1)
forms2 <- list(FARC_results2$EmoNeg ~ 1, FARC_results2$EmoPos ~ 1, FARC_results2$Ellos ~ 1)
BIC_vals2 <- sapply(num_states, function(x) {BIC(fit(depmix(forms2, family = list(gaussian(), gaussian(), gaussian()), nstates = x, data = FARC_results2[,-(6:9)])))})
BIC_df2 <- data.frame(cbind(num_states, BIC_vals2))
# plot the BIC values to select the optimal number of states
BIC_plot2 <- ggplot(BIC_df2, aes(x = num_states, y = BIC_vals2)) +
geom_point() +
ggtitle("BIC Values for n = 2:10 Latent States Fitted HMM")
BIC_plot2
AIC_vals <- sapply(num_states, function(x) {AIC(fit(depmix(forms2, family = list(gaussian(), gaussian(), gaussian()), nstates = x, data = FARC_results2[,-(6:9)])))})
AIC_df <- data.frame(cbind(num_states, AIC_vals))
# plot the AIC values to select the optimal number of states
AIC_plot <- ggplot(AIC_df, aes(x = num_states, y = AIC_vals)) +
geom_point() +
ggtitle("AIC Values for n = 2:10 Latent States Fitted HMM")
View(FARC_results2)
View(FARC_results2)
AIC_vals <- sapply(num_states, function(x) {AIC(fit(depmix(forms2, family = list(gaussian(), gaussian(), gaussian()), nstates = x, data = FARC_results2[,-(5:8)])))})
AIC_df <- data.frame(cbind(num_states, AIC_vals))
# plot the AIC values to select the optimal number of states
AIC_plot <- ggplot(AIC_df, aes(x = num_states, y = AIC_vals)) +
geom_point() +
ggtitle("AIC Values for n = 2:10 Latent States Fitted HMM")
FARC_results1 <- FARC_results[, -4]
View(FARC_results1)
forms1 <- list(FARC_results1$EmoNeg ~ 1, FARC_results1$EmoPos ~ 1, FARC_results1$Ellos ~ 1)
num_states <- seq(2, 10, by = 1)
BIC_vals <- sapply(num_states, function(x) {BIC(depmix(forms1, family = list(gaussian(), gaussian(), gaussian()), nstates = x, data = FARC_results1))})
BIC_df <- data.frame(cbind(num_states, BIC_vals))
BIC_df
depmix(forms1, family = list(gaussian(), gaussian(), gaussian()), nstates = 2, data = FARC_results1)
BIC(depmix(forms1, family = list(gaussian(), gaussian(), gaussian()), nstates = 2, data = FARC_results1))
BIC(depmix(forms1, family = list(gaussian(), gaussian(), gaussian()), nstates = 4, data = FARC_results1))
BIC_vals <- sapply(num_states, function(x) {BIC(depmix(forms1, family = list(gaussian(), gaussian(), gaussian()), nstates = x, data = FARC_results1[,-4]))})
BIC_df <- data.frame(cbind(num_states, BIC_vals))
# plot the BIC values to select the optimal number of states
BIC_plot <- ggplot(BIC_df, aes(x = num_states, y = BIC_vals)) +
geom_point() +
ggtitle("BIC Values for n = 2:10 Latent States HMM")
BIC_plot
BIC_vals <- sapply(num_states, function(x) {BIC(depmix(forms1, family = list(gaussian(), gaussian(), gaussian()), nstates = x, data = FARC_results1[,-4]))})
BIC_vals
depmix(forms1, family = list(gaussian(), gaussian(), gaussian()), nstates = 2, data = FARC_results1[,-4])
fit(depmix(forms1, family = list(gaussian(), gaussian(), gaussian()), nstates = x, data = FARC_results1[,-4]))
fit(depmix(forms1, family = list(gaussian(), gaussian(), gaussian()), nstates = 2, data = FARC_results1[,-4]))
BIC_vals <- sapply(num_states, function(x) {BIC(fit(depmix(forms1, family = list(gaussian(), gaussian(), gaussian()), nstates = x, data = FARC_results1[,-4])))})
BIC_df <- data.frame(cbind(num_states, BIC_vals))
# plot the BIC values to select the optimal number of states
BIC_plot <- ggplot(BIC_df, aes(x = num_states, y = BIC_vals)) +
geom_point() +
ggtitle("BIC Values for n = 2:10 Latent States HMM")
BIC_plot
BIC_plot2
BIC_vals <- sapply(num_states, function(x) {BIC(fit(depmix(forms1, family = list(gaussian(), gaussian(), gaussian()), nstates = x, data = FARC_results1)))})
BIC_df <- data.frame(cbind(num_states, BIC_vals))
# plot the BIC values to select the optimal number of states
BIC_plot <- ggplot(BIC_df, aes(x = num_states, y = BIC_vals)) +
geom_point() +
ggtitle("BIC Values for n = 2:10 Latent States HMM")
BIC_plot
forms2 <- list(FARC_results2$EmoNeg ~ 1, FARC_results2$EmoPos ~ 1, FARC_results2$Ellos ~ 1)
# Optimize BIC vals for fitted model
BIC_vals2 <- sapply(num_states, function(x) {BIC(fit(depmix(forms2, family = list(gaussian(), gaussian(), gaussian()), nstates = x, data = FARC_results2[,-(6:9)])))})
BIC_df2 <- data.frame(cbind(num_states, BIC_vals2))
# plot the BIC values to select the optimal number of states
BIC_plot2 <- ggplot(BIC_df2, aes(x = num_states, y = BIC_vals2)) +
geom_point() +
ggtitle("BIC Values for n = 2:10 Latent States Fitted HMM")
BIC_plot2
BIC_vals2 <- sapply(num_states, function(x) {BIC(fit(depmix(forms2, family = list(gaussian(), gaussian(), gaussian()), nstates = x, data = FARC_results2[,-(5:8)])))})
BIC_df2 <- data.frame(cbind(num_states, BIC_vals2))
# plot the BIC values to select the optimal number of states
BIC_plot2 <- ggplot(BIC_df2, aes(x = num_states, y = BIC_vals2)) +
geom_point() +
ggtitle("BIC Values for n = 2:10 Latent States Fitted HMM")
BIC_plot2
BIC_vals2 <- sapply(num_states, function(x) {BIC(fit(depmix(forms2, family = list(gaussian(), gaussian(), gaussian()), nstates = x, data = FARC_results2[,-(4:8)])))})
BIC_df2 <- data.frame(cbind(num_states, BIC_vals2))
# plot the BIC values to select the optimal number of states
BIC_plot2 <- ggplot(BIC_df2, aes(x = num_states, y = BIC_vals2)) +
geom_point() +
ggtitle("BIC Values for n = 2:10 Latent States Fitted HMM")
BIC_plot2
AIC_vals <- sapply(num_states, function(x) {AIC(fit(depmix(forms2, family = list(gaussian(), gaussian(), gaussian()), nstates = x, data = FARC_results2[,-(4:8)])))})
AIC_df <- data.frame(cbind(num_states, AIC_vals))
# plot the AIC values to select the optimal number of states
AIC_plot <- ggplot(AIC_df, aes(x = num_states, y = AIC_vals)) +
geom_point() +
ggtitle("AIC Values for n = 2:10 Latent States Fitted HMM")
AIC_plot
foo <- sapply(num_states, function(x) {BIC(fit(depmix(FARC_results2$EmoNeg ~ 1, family = list(gaussian()), nstates = x, data = FARC_results2[,-(4:8)])))})
foo <- sapply(num_states, function(x) {BIC(fit(depmix(FARC_results2$EmoNeg ~ 1, family = gaussian(), nstates = x, data = FARC_results2[,-(4:8)])))})
fit(foo)
foo
foo <- sapply(num_states, function(x) {BIC(fit(depmix(list(FARC_results2$EmoNeg ~ 1, FARC_results2$EmoPos ~1), family = list(gaussian(), gaussian()), nstates = x, data = FARC_results2[,-(4:8)])))})
foo
foo <- sapply(num_states, function(x) {AIC(fit(depmix(list(FARC_results2$EmoNeg ~ 1, FARC_results2$EmoPos ~1), family = list(gaussian(), gaussian()), nstates = x, data = FARC_results2[,-(4:8)])))})
foo
FARC_results1 <- FARC_results[, -(3:4)]
BIC_vals2 <- sapply(num_states, function(x) {BIC(fit(depmix(forms2, family = list(gaussian(), gaussian(), gaussian()), nstates = x, data = FARC_results1)))})
BIC_vals2
# formulas for the model
forms1 <- list(FARC_results1$EmoNeg ~ 1, FARC_results1$EmoPos ~ 1)
# Optimize BIC vals for fitted model
BIC_vals1 <- sapply(num_states, function(x) {BIC(fit(depmix(forms1, family = list(gaussian(), gaussian()), nstates = x, data = FARC_results1)))})
BIC_df1 <- data.frame(cbind(num_states, BIC_vals1))
# plot the BIC values to select the optimal number of states
BIC_plot1 <- ggplot(BIC_df1, aes(x = num_states, y = BIC_vals1)) +
geom_point() +
ggtitle("BIC Values for n = 2:10 Latent States Fitted HMM")
BIC_plot1
AIC_vals1 <- sapply(num_states, function(x) {AIC(fit(depmix(forms1, family = list(gaussian(), gaussian()), nstates = x, data = FARC_results1)))})
AIC_df1 <- data.frame(cbind(num_states, AIC_vals1))
# plot the AIC values to select the optimal number of states
AIC_plot1 <- ggplot(AIC_df1, aes(x = num_states, y = AIC_vals1)) +
geom_point() +
ggtitle("AIC Values for n = 2:10 Latent States Fitted HMM")
AIC_plot1
AIC_vals1 <- sapply(num_states, function(x) {AIC(fit(depmix(forms1, family = list(gaussian(), gaussian()), nstates = x, data = FARC_results1)))})
num_states <- seq(1, 6, by = 1)
forms1 <- list(FARC_results1$EmoNeg ~ 1, FARC_results1$EmoPos ~ 1)
# Optimize BIC vals for fitted model, no covars
BIC_vals1 <- sapply(num_states, function(x) {BIC(fit(depmix(forms1, family = list(gaussian(), gaussian()), nstates = x, data = FARC_results1)))})
BIC_df1 <- data.frame(cbind(num_states, BIC_vals1))
# plot the BIC values to select the optimal number of states
BIC_plot1 <- ggplot(BIC_df1, aes(x = num_states, y = BIC_vals1)) +
geom_point() +
ggtitle("BIC Values for n = 2:10 Latent States Fitted HMM")
BIC_plot1
num_states <- seq(1, 6, by = 1)
# formulas for the model
forms1 <- list(FARC_results1$EmoNeg ~ 1, FARC_results1$EmoPos ~ 1)
# Optimize BIC vals for fitted model, no covars
BIC_vals1 <- sapply(num_states, function(x) {BIC(fit(depmix(forms1, family = list(gaussian(), gaussian()), nstates = x, data = FARC_results1)))})
BIC_df1 <- data.frame(cbind(num_states, BIC_vals1))
# plot the BIC values to select the optimal number of states
BIC_plot1 <- ggplot(BIC_df1, aes(x = num_states, y = BIC_vals1)) +
geom_point() +
ggtitle("BIC Values for n = 2:10 Latent States Fitted HMM")
BIC_plot1
AIC_vals1 <- sapply(num_states, function(x) {AIC(fit(depmix(forms1, family = list(gaussian(), gaussian()), nstates = x, data = FARC_results1)))})
AIC_vals1
BIC_vals1
AIC_df1 <- data.frame(cbind(num_states, AIC_vals1))
# plot the AIC values to select the optimal number of states
AIC_plot1 <- ggplot(AIC_df1, aes(x = num_states, y = AIC_vals1)) +
geom_point() +
ggtitle("AIC Values for n = 2:10 Latent States Fitted HMM")
AIC_plot1
View(govt)
View(govt_results)
govt_results1 <- govt_results[, -(3:4)]
forms1_gov <- list(govt_results1$EmoNeg ~ 1, govt_results1$EmoPos ~ 1)
forms1_govt <- list(govt_results1$EmoNeg ~ 1, govt_results1$EmoPos ~ 1)
BIC_vals1_govt <- sapply(num_states, function(x) {BIC(fit(depmix(forms1_govt, family = list(gaussian(), gaussian()), nstates = x, data = govt_results1)))})
View(govt_results1)
depmix(forms1_govt, family = list(gaussian(), gaussian()), nstates = 2, data = govt_results1)
fit(depmix(forms1_govt, family = list(gaussian(), gaussian()), nstates = 2, data = govt_results1))
govt_results1 <- govt_results[, -(3:4)]
forms1_govt <- list(govt_results1$EmoNeg ~ 1, govt_results1$EmoPos ~ 1)
BIC_vals1_govt <- sapply(num_states, function(x) {BIC(fit(depmix(forms1_govt, family = list(gaussian(), gaussian()), nstates = x, data = govt_results1)))})
BIC_vals1_govt
AIC_vals1_govt <- sapply(num_states, function(x) {AIC(fit(depmix(forms1_govt, family = list(gaussian(), gaussian()), nstates = x, data = govt_results1)))})
AIC_vals1_govt
FARC_results2 <- add_monthlies(FARC_results1)
govt_results2 <- add_monthlies(govt_results)
BIC_vals_fitted <- sapply(num_states, function(x) {BIC(fit(depmix(forms1, family = list(gaussian(), gaussian()), nstates = x, transitions = list(~ FARC_actions, ~ pres_approve), data = FARC_results1)))})
BIC_vals_fitted
AIC_vals_fitted <- sapply(num_states, function(x) {AIC(fit(depmix(forms1, family = list(gaussian(), gaussian()), nstates = x, transitions = list(~ FARC_actions, ~ pres_approve), data = FARC_results1)))})
AIC_vals_fitted
BIC_vals_fitted <- sapply(num_states, function(x) {BIC(fit(depmix(forms1, family = list(gaussian(), gaussian()), nstates = x, transitions = list(~ FARC_actions, ~ pres_approve), data = FARC_results2)))})
AIC_vals_fitted <- sapply(num_states, function(x) {AIC(fit(depmix(forms1, family = list(gaussian(), gaussian()), nstates = x, transitions = list(~ FARC_actions, ~ pres_approve), data = FARC_results2)))})
BIC_vals_fitted
AIC_vals_fitted
BIC_vals_fitted_govt <- sapply(num_states, function(x) {BIC(fit(depmix(forms1_govt, family = list(gaussian(), gaussian()), nstates = x, transitions = list(~ FARC_actions, ~ pres_approve), data = govt_results2)))})
AIC_vals_fitted_govt <- sapply(num_states, function(x) {AIC(fit(depmix(forms1_govt, family = list(gaussian(), gaussian()), nstates = x, transitions = list(~ FARC_actions, ~ pres_approve), data = govt_results2)))})
BIC_vals_fitted_govt
AIC_vals_fitted_govt
View(FARC_results2)
FARC_results2[, 4:7] <- log(FARC_results2[, 4:7])
BIC_vals_fitted <- sapply(num_states, function(x) {BIC(fit(depmix(forms1, family = list(gaussian(), gaussian()), nstates = x, transitions = list(~ FARC_actions, ~ pres_approve), data = FARC_results2)))})
BIC_vals_fitted
AIC_vals_fitted
AIC_vals_fitted <- sapply(num_states, function(x) {AIC(fit(depmix(forms1, family = list(gaussian(), gaussian()), nstates = x, transitions = list(~ FARC_actions, ~ pres_approve), data = FARC_results2)))})
AIC_vals_fitted
class(BIC_vals)
foo$BIC1 <- data.frame(BIC_vals)
data.frame(BIC_vals)
BIC_vals1
hmm_comparison <- data.frame(num_states)
hmm_comparison
hmm_comparison <- cbind(hmm_comparison, data.frame(BIC_vals1))
hmm_comparison
hmm_comparison <- data.frame(num_states)
hmm_comparison <- cbind(hmm_comparison, data.frame(BIC_vals1, AIC_vals1))
hmm_comparison
hmm_comparison <- data.frame(num_states, BIC_vals1, AIC_vals1)
hmm_comparison
hmm_comparison <- data.frame(num_states, BIC_vals1, AIC_vals1, BIC_vals_fitted, AIC_vals_fitted, BIC_vals1_govt, AIC_vals1_govt, BIC_vals_fitted_govt, AIC_vals_fitted_govt)
hmm_comparison
row.names(hmm_comparison) <- c("No. states", "FARC BIC", "FARC AIC", "FARC BIC fit", "FARC AIC fit", "Govt BIC", "Govt AIC", "Govt BIC fit", "Govt AIC fit")
col.names(hmm_comparison) <- c("No. states", "FARC BIC", "FARC AIC", "FARC BIC fit", "FARC AIC fit", "Govt BIC", "Govt AIC", "Govt BIC fit", "Govt AIC fit")
colnames(hmm_comparison) <- c("No. states", "FARC BIC", "FARC AIC", "FARC BIC fit", "FARC AIC fit", "Govt BIC", "Govt AIC", "Govt BIC fit", "Govt AIC fit")
hmm_comparison
stargazer(hmm_comparison, title="Comparison of Hidden Markov Models", column.labels=c("No. states", "FARC BIC", "FARC AIC", "FARC BIC fit", "FARC AIC fit", "Govt BIC", "Govt AIC", "Govt BIC fit", "Govt AIC fit"), summary = FALSE)
stargazer(hmm_comparison, title="Comparison of Hidden Markov Models", column.labels=c("FARC BIC", "FARC AIC", "FARC BIC fit", "FARC AIC fit", "Govt BIC", "Govt AIC", "Govt BIC fit", "Govt AIC fit"), summary = FALSE)
hmm_comparison <- data.frame(BIC_vals1, AIC_vals1, BIC_vals_fitted, AIC_vals_fitted, BIC_vals1_govt, AIC_vals1_govt, BIC_vals_fitted_govt, AIC_vals_fitted_govt)
stargazer(hmm_comparison, title="Comparison of Hidden Markov Models", column.labels=c("FARC BIC", "FARC AIC", "FARC BIC fit", "FARC AIC fit", "Govt BIC", "Govt AIC", "Govt BIC fit", "Govt AIC fit"), summary = FALSE)
hmm_comparison <- data.frame(BIC_vals1, AIC_vals1, BIC_vals_fitted, AIC_vals_fitted, BIC_vals1_govt, AIC_vals1_govt, BIC_vals_fitted_govt, AIC_vals_fitted_govt)
stargazer(hmm_comparison, title="Comparison of Hidden Markov Models", column.labels=c("BIC", "AIC", "BIC", "AIC", "BIC", "AIC", "BIC", "AIC"), summary = FALSE)
hmm_comparison <- data.frame(BIC_vals1, AIC_vals1, BIC_vals_fitted, AIC_vals_fitted, BIC_vals1_govt, AIC_vals1_govt, BIC_vals_fitted_govt, AIC_vals_fitted_govt)
colnames(hmm_comparison) <- c("BIC", "AIC", "BIC", "AIC", "BIC", "AIC", "BIC", "AIC")
stargazer(hmm_comparison, title="Comparison of Hidden Markov Models", column.labels=c("BIC", "AIC", "BIC", "AIC", "BIC", "AIC", "BIC", "AIC"), summary = FALSE, digits = 2)
stargazer(hmm_comparison, title="Comparison of Hidden Markov Models", column.labels=c("BIC", "AIC", "BIC", "AIC", "BIC", "AIC", "BIC", "AIC"), summary = FALSE, digits = 2, flip = TRUE)
stargazer(hmm_comparison, title="Comparison of Hidden Markov Models", summary = FALSE, digits = 2, flip = TRUE)
colnames(hmm_comparison) <- c("BIC", "AIC", "BIC2", "AIC2", "BIC3", "AIC3", "BIC4", "AIC4")
stargazer(hmm_comparison, title="Comparison of Hidden Markov Models", summary = FALSE, digits = 2, flip = TRUE)
stargazer(hmm_comparison, title="Comparison of Hidden Markov Models", column.labels=c("BIC", "AIC", "BIC", "AIC", "BIC", "AIC", "BIC", "AIC"), summary = FALSE, digits = 2, digit.separator = "")
stargazer(hmm_comparison, title="Comparison of Hidden Markov Models", column.labels=c("BIC", "AIC", "BIC", "AIC", "BIC", "AIC", "BIC", "AIC"), summary = FALSE, digits = 2, digit.separator = "", notes = "Note: Models (1) and (2) are estimated with negative and positive emotion. Covariates for the log transformed number of FARC actions and the log transformed presidential approval rating are added to Models (3) and (4).", notes.align = "c")
FARC_results2 <- add_monthlies(FARC_results1)
govt_results2 <- add_monthlies(govt_results)
BIC_vals_fitted <- sapply(num_states, function(x) {BIC(fit(depmix(forms1, family = list(gaussian(), gaussian()), nstates = x, transitions = list(~ FARC_actions, ~ pres_approve), data = FARC_results2)))})
AIC_vals_fitted <- sapply(num_states, function(x) {AIC(fit(depmix(forms1, family = list(gaussian(), gaussian()), nstates = x, transitions = list(~ FARC_actions, ~ pres_approve), data = FARC_results2)))})
BIC_vals_fitted_govt <- sapply(num_states, function(x) {BIC(fit(depmix(forms1_govt, family = list(gaussian(), gaussian()), nstates = x, transitions = list(~ FARC_actions, ~ pres_approve), data = govt_results2)))})
AIC_vals_fitted_govt <- sapply(num_states, function(x) {AIC(fit(depmix(forms1_govt, family = list(gaussian(), gaussian()), nstates = x, transitions = list(~ FARC_actions, ~ pres_approve), data = govt_results2)))})
hmm_comparison <- data.frame(BIC_vals1, AIC_vals1, BIC_vals_fitted, AIC_vals_fitted, BIC_vals1_govt, AIC_vals1_govt, BIC_vals_fitted_govt, AIC_vals_fitted_govt)
colnames(hmm_comparison) <- c("BIC", "AIC", "BIC", "AIC", "BIC", "AIC", "BIC", "AIC")
stargazer(hmm_comparison, title="Comparison of Hidden Markov Models", column.labels=c("BIC", "AIC", "BIC", "AIC", "BIC", "AIC", "BIC", "AIC"), summary = FALSE, digits = 2, digit.separator = "")
FARC_results2[, 4:7] <- log(FARC_results2[, 4:7])
govt_results2[, 4:7] <- log(govt_results2[, 4:7])
BIC_vals_fitted <- sapply(num_states, function(x) {BIC(fit(depmix(forms1, family = list(gaussian(), gaussian()), nstates = x, transitions = list(~ FARC_actions, ~ pres_approve), data = FARC_results2)))})
AIC_vals_fitted <- sapply(num_states, function(x) {AIC(fit(depmix(forms1, family = list(gaussian(), gaussian()), nstates = x, transitions = list(~ FARC_actions, ~ pres_approve), data = FARC_results2)))})
BIC_vals_fitted_govt <- sapply(num_states, function(x) {BIC(fit(depmix(forms1_govt, family = list(gaussian(), gaussian()), nstates = x, transitions = list(~ FARC_actions, ~ pres_approve), data = govt_results2)))})
AIC_vals_fitted_govt <- sapply(num_states, function(x) {AIC(fit(depmix(forms1_govt, family = list(gaussian(), gaussian()), nstates = x, transitions = list(~ FARC_actions, ~ pres_approve), data = govt_results2)))})
