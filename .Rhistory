# make the MCMC matrix
mc_mat <- dplyr::select(transition_chain, date, sentiment_level, side)
# x = current state, y = next state.
# State1 = FARC-low, State 2 = FARC-high, State 3 = govt-low, State 4 = govt-high
# Function takes 1 parameter: a df with "side" and "sentiment_level" variables
state_maker <- function(df) {
df["state_x"] <- NA
# fill in the appropriate states
for (i in 1:length(df[, 1])) {
# Divide FARC into states 1 and 2
if (df["side"][i, ] == "FARC") {
if (df["sentiment_level"][i, ] == 0) {
df["state_x"][i, ] <- 1
}
else {
df["state_x"][i, ] <- 2
}
}
# Divide govt into states 3 and 4
if (df["side"][i, ] == "govt") {
if (df["sentiment_level"][i, ] == 0) {
df["state_x"][i, ] <- 3
}
else {
df["state_x"][i, ] <- 4
}
}
}
df["state_y"] <- NA
for (i in 1:length(df[, 1]) -1) {
df["state_y"][i, ] <- df["state_x"][i+1, ]
}
return(df)
}
mc_mat <- state_maker(mc_mat)
# add violence and public opinion for random effects
mc_mat <- add_monthlies(mc_mat)
# Run MCMC
mc_model <- MCMCglmm(state_y ~ state_x, random = NULL, data = mc_mat, family = "categorical", rcov = ~us(trait):units)
summary(mc_model)
plot(mc_model$VCV)
# Classify overall sentiment as "high" or "low": Compare negative and positive emotion proportions within a given document. 1 = high, 0 = low
FARC_results3 <- FARC_results
FARC_results3["sentiment_level"] <- as.numeric(2 * FARC_results3$EmoNeg <= FARC_results3$EmoPos)
FARC_results3["side"] <- "FARC"
govt_results3 <- govt_results
govt_results3["side"] <- "govt"
govt_results3["sentiment_level"] <- as.numeric(2 * govt_results3$EmoNeg <= govt_results3$EmoPos)
# combine them into one stream
transition_chain <- rbind(FARC_results3, govt_results3)
# and sort by date
transition_chain <- transition_chain[order(as.Date(transition_chain$date, format = "%Y-%m-%d")), ]
# and filter to the peace process
transition_chain <- filter(transition_chain, date > "2012-01-01")
# pairwise comparison to gauge "responsiveness": how often are the parties giving statements at t and t-1 different?
get_responsiveness <- function(df) {
# put boolean of pairwise comparisons here
vect <- rep(NA, (length(df[ , 1]) - 1))
for (i in 2:length(df[ , 1])) {
side_t <- df["side"][i, ]
side_t_1 <- df["side"][i-1, ]
vect[i] <- side_t != side_t_1
}
return(vect)
}
# how frequent are "responding pairs"?
pairwise_responsiveness <- get_responsiveness(transition_chain)
pairwise_num <- sum(na.omit(as.numeric(pairwise_responsiveness)))
pairwise_num
#################################################################################
#################################################################################
# MCMC
# make the MCMC matrix
mc_mat <- dplyr::select(transition_chain, date, sentiment_level, side)
# x = current state, y = next state.
# State1 = FARC-low, State 2 = FARC-high, State 3 = govt-low, State 4 = govt-high
# Function takes 1 parameter: a df with "side" and "sentiment_level" variables
state_maker <- function(df) {
df["state_x"] <- NA
# fill in the appropriate states
for (i in 1:length(df[, 1])) {
# Divide FARC into states 1 and 2
if (df["side"][i, ] == "FARC") {
if (df["sentiment_level"][i, ] == 0) {
df["state_x"][i, ] <- 1
}
else {
df["state_x"][i, ] <- 2
}
}
# Divide govt into states 3 and 4
if (df["side"][i, ] == "govt") {
if (df["sentiment_level"][i, ] == 0) {
df["state_x"][i, ] <- 3
}
else {
df["state_x"][i, ] <- 4
}
}
}
df["state_y"] <- NA
for (i in 1:length(df[, 1]) -1) {
df["state_y"][i, ] <- df["state_x"][i+1, ]
}
return(df)
}
mc_mat <- state_maker(mc_mat)
# add violence and public opinion for random effects
mc_mat <- add_monthlies(mc_mat)
# Run MCMC
mc_model <- MCMCglmm(state_y ~ state_x, random = NULL, data = mc_mat, family = "categorical", rcov = ~us(trait):units)
summary(mc_model)
plot(mc_model$VCV)
plot(mc_model$VCV)
plot(mc_model$VCV)
plot(mc_model$VCV)
summary(statements_PCA_trimmed)
statements_PCA_trimmed <- prcomp(all_dfm_trimmed, center = TRUE, scale. = TRUE)
FARC_corpus <- corpus(FARC$text, docvars = FARC_results$dates)
govt_corpus <- corpus(govt$text, docvars = govt_results$dates)
all_corpora <- FARC_corpus + govt_corpus
# docvars for inserting: sides and dates
sides <- c(rep("FARC", length(FARC_corpus[, 1])), rep("govt", length(govt_corpus[, 1])))
pca_dates <- c(FARC_results$date, govt_results$date)
# make dfm
all_dfm <- dfm(all_corpora, language = "spanish", stem = TRUE, ignoredFeatures = stopwords("spanish"))
# run PCA
statements_PCA <- prcomp(all_dfm, center = TRUE, scale. = TRUE)
summary(statements_PCA)
# plot it
plot(statements_PCA, type = "l", main="PCA of FARC and Govt Statements")
# first 2 PCs account for ~10% of variance. Could be better...
# create graph of PC1 and PC2
PC_graph <- ggbiplot(statements_PCA, obs.scale = 1, var.scale = 1, groups = sides)
PC_graph <- PC_graph + theme(legend.direction = "horizontal", legend.position = "top")
PC_graph
# Graph PC1 as a time series:
# collect date and side metadata with PC1 values
statements_PC1_2 <- data.frame(statements_PCA$x[1:length(statements_PCA$x[,1]),1:2])
statements_PC1_2["date"] <- pca_dates
statements_PC1_2["side"] <- sides
colnames(statements_PC1_2) <- c("PC1", "PC2", "date", "side")
PC1_gg <- ggplot(filter(statements_PC1_2, side == "FARC"), aes(x = as.Date(date, origin = "1970-01-01"), y = PC1, color = "FARC")) +
geom_jitter() +
geom_point(data = filter(statements_PC1_2, side == "govt"), aes(x = as.Date(date, origin = "1970-01-01"), y = PC1, color = "Govt")) +
ggtitle("Plot of First Principal Components over Time") +
scale_x_date(date_minor_breaks = "1 month",
limits = c(as.Date("2012-06-01", "%Y-%m-%d"), NA))
# Graph PC2
# collect date and side metadata with PC1 values
PC2_gg <- ggplot(filter(statements_PC1_2, side == "FARC"), aes(x = as.Date(date, origin = "1970-01-01"), y = PC2, color = "FARC")) +
geom_jitter() +
geom_point(data = filter(statements_PC1_2, side == "govt"), aes(x = as.Date(date, origin = "1970-01-01"), y = PC2, color = "Govt")) +
ggtitle("Plot of Second Principal Components over Time") +
scale_x_date(date_minor_breaks = "1 month",
limits = c(as.Date("2012-06-01", "%Y-%m-%d"), NA))
#################################################################################
#################################################################################
# FARC statement # 94 is an outlier. Let's try removing it, adding log transformation, and rerun PCA
# trimmed_statements_PC1_2 <- filter(statements_PC1_2, PC2 < 231)
FARC_corpus_trimmed <- corpus(FARC$text[-94], docvars = FARC_results$dates[-94])
all_corpora_trimmed <- FARC_corpus_trimmed + govt_corpus
all_dfm_trimmed <- log(dfm(all_corpora_trimmed, language = "spanish", stem = TRUE, ignoredFeatures = stopwords("spanish")))
statements_PCA_trimmed <- prcomp(all_dfm_trimmed, center = TRUE, scale. = TRUE)
summary(statements_PCA_trimmed)
# plot it: still not great
plot(statements_PCA_trimmed, type = "l", main="PCA of FARC and Govt Statements")
statements_PC1_2_trimmed <- data.frame(statements_PCA_trimmed$x[1:length(statements_PCA_trimmed$x[,1]),1:2])
statements_PC1_2_trimmed["date"] <- pca_dates[-94]
statements_PC1_2_trimmed["side"] <- sides[-94]
colnames(statements_PC1_2_trimmed) <- c("PC1", "PC2", "date", "side")
# Plot PC1 time series
PC1_gg_trimmed <- ggplot(filter(statements_PC1_2_trimmed, side == "FARC"), aes(x = as.Date(date, origin = "1970-01-01"), y = PC1, color = "FARC")) +
geom_smooth(method = "loess", se = FALSE) +
geom_jitter() +
geom_point(data = filter(statements_PC1_2_trimmed, side == "govt"), aes(x = as.Date(date, origin = "1970-01-01"), y = PC1, color = "Govt")) +
geom_smooth(method = "loess", se = FALSE, data = statements_PC1_2_trimmed, aes(x = as.Date(date, origin = "1970-01-01"), y = PC1, color = "Govt")) +
ggtitle("Plot of First Principal Components over Time (Outlier Removed)") +
scale_x_date(date_minor_breaks = "1 month",
limits = c(as.Date("2012-06-01", "%Y-%m-%d"), NA)) +
labs(
x = "Date",
y = "PC1",
color = "Legend")
# Graph PC2
# collect date and side metadata with PC1 values
PC2_gg_trimmed <- ggplot(filter(statements_PC1_2_trimmed, side == "FARC"), aes(x = as.Date(date, origin = "1970-01-01"), y = PC2, color = "FARC")) +
geom_smooth(method = "loess", se = FALSE) +
geom_jitter() +
geom_point(data = filter(statements_PC1_2_trimmed, side == "govt"), aes(x = as.Date(date, origin = "1970-01-01"), y = PC2, color = "Govt")) +
geom_smooth(method = "loess", se = FALSE, data = statements_PC1_2_trimmed, aes(x = as.Date(date, origin = "1970-01-01"), y = PC2, color = "Govt")) +
ggtitle("Plot of Second Principal Components over Time (Outlier Removed)") +
scale_x_date(date_minor_breaks = "1 month",
limits = c(as.Date("2012-06-01", "%Y-%m-%d"), NA)) +
labs(
x = "Date",
y = "PC2",
color = "Legend")
all_dfm_trimmed <- log(dfm(all_corpora_trimmed, language = "spanish", stem = TRUE, ignoredFeatures = stopwords("spanish")))
statements_PCA_trimmed <- prcomp(all_dfm_trimmed, center = TRUE, scale. = TRUE)
all_dfm_trimmed <- dfm(all_corpora_trimmed, language = "spanish", stem = TRUE, ignoredFeatures = stopwords("spanish"))
statements_PCA_trimmed <- prcomp(all_dfm_trimmed, center = TRUE, scale. = TRUE)
summary(statements_PCA_trimmed)
plot(statements_PCA_trimmed, type = "l", main="PCA of FARC and Govt Statements")
statements_PC1_2_trimmed <- data.frame(statements_PCA_trimmed$x[1:length(statements_PCA_trimmed$x[,1]),1:2])
statements_PC1_2_trimmed["date"] <- pca_dates[-94]
statements_PC1_2_trimmed["side"] <- sides[-94]
colnames(statements_PC1_2_trimmed) <- c("PC1", "PC2", "date", "side")
# Plot PC1 time series
PC1_gg_trimmed <- ggplot(filter(statements_PC1_2_trimmed, side == "FARC"), aes(x = as.Date(date, origin = "1970-01-01"), y = PC1, color = "FARC")) +
geom_smooth(method = "loess", se = FALSE) +
geom_jitter() +
geom_point(data = filter(statements_PC1_2_trimmed, side == "govt"), aes(x = as.Date(date, origin = "1970-01-01"), y = PC1, color = "Govt")) +
geom_smooth(method = "loess", se = FALSE, data = statements_PC1_2_trimmed, aes(x = as.Date(date, origin = "1970-01-01"), y = PC1, color = "Govt")) +
ggtitle("Plot of First Principal Components over Time (Outlier Removed)") +
scale_x_date(date_minor_breaks = "1 month",
limits = c(as.Date("2012-06-01", "%Y-%m-%d"), NA)) +
labs(
x = "Date",
y = "PC1",
color = "Legend")
# Graph PC2
# collect date and side metadata with PC1 values
PC2_gg_trimmed <- ggplot(filter(statements_PC1_2_trimmed, side == "FARC"), aes(x = as.Date(date, origin = "1970-01-01"), y = PC2, color = "FARC")) +
geom_smooth(method = "loess", se = FALSE) +
geom_jitter() +
geom_point(data = filter(statements_PC1_2_trimmed, side == "govt"), aes(x = as.Date(date, origin = "1970-01-01"), y = PC2, color = "Govt")) +
geom_smooth(method = "loess", se = FALSE, data = statements_PC1_2_trimmed, aes(x = as.Date(date, origin = "1970-01-01"), y = PC2, color = "Govt")) +
ggtitle("Plot of Second Principal Components over Time (Outlier Removed)") +
scale_x_date(date_minor_breaks = "1 month",
limits = c(as.Date("2012-06-01", "%Y-%m-%d"), NA)) +
labs(
x = "Date",
y = "PC2",
color = "Legend")
#################################################################################
#################################################################################
# Robust PCA
rob_pca <- PcaHubert(all_dfm)
# First 2 components account for 65% of variance
print(rob_pca)
summary(rob_pca)
# plot
screeplot(rob_pca, type = "lines", main = "Robust PCA with 10 Components")
# let's plot the time series of PC1
rob_pc1 <- data.frame(rob_pca@scores)
rob_pc1 <- dplyr::select(rob_pc1, PC1)
rob_pc1["side"] <- sides
rob_pc1["date"] <- pca_dates
# Robust PC1 graph
PC1_gg_robust <- ggplot(filter(rob_pc1, side == "FARC"), aes(x = as.Date(date, origin = "1970-01-01"), y = PC1, color = "FARC")) +
geom_smooth(method = "loess", se = FALSE) +
geom_jitter() +
geom_point(data = filter(rob_pc1, side == "govt"), aes(x = as.Date(date, origin = "1970-01-01"), y = PC1, color = "Govt")) +
geom_smooth(method = "loess", se = FALSE, data = rob_pc1, aes(x = as.Date(date, origin = "1970-01-01"), y = PC1, color = "Govt")) +
ggtitle("Plot of First Principal Components over Time (Robust PCA)") +
scale_x_date(date_minor_breaks = "1 month",
limits = c(as.Date("2012-06-01", "%Y-%m-%d"), NA)) +
labs(
x = "Date",
y = "PC1",
color = "Legend")
statements_PCA_trimmed$rotation
head(statements_PCA_trimmed$rotation)
head(statements_PCA$rotation)
head(statements_PCA$rotation)
head(statements_PCA$sdev)
statements_PCA$sdev
statements_PCA$center
head(statements_PCA$center)
tail(statements_PCA$center)
statements_PCA$scale
statements_PCA$x
statements_PCA
print(statements_PCA)
print(head(statements_PCA))
print(statements_PC1_2)
print((sort(statements_PC1_2))
)
print(sort(statements_PC1_2))
PC_graph
mod <- depmix(forms2, family = list(gaussian(), gaussian(), gaussian()), nstates = 3, data = FARC_results2[,-(6:9)])
hmm_mod <- fit(mod)
summary(hmm_mod)
AIC_vals <- sapply(num_states, function(x) {AIC(fit(depmix(forms2, family = list(gaussian(), gaussian(), gaussian()), nstates = x, data = FARC_results2[,-(6:9)])))})
AIC_df <- data.frame(cbind(num_states, AIC_vals))
# plot the AIC values to select the optimal number of states
AIC_plot <- ggplot(AIC_df, aes(x = num_states, y = AIC_vals)) +
geom_point() +
ggtitle("AIC Values for n = 2:10 Latent States Fitted HMM")
forms2 <- list(FARC_results2$EmoNeg ~ 1, FARC_results2$EmoPos ~ 1, FARC_results2$Ellos ~ 1)
# Optimize BIC vals for fitted model
BIC_vals2 <- sapply(num_states, function(x) {BIC(fit(depmix(forms2, family = list(gaussian(), gaussian(), gaussian()), nstates = x, data = FARC_results2[,-(6:9)])))})
BIC_df2 <- data.frame(cbind(num_states, BIC_vals2))
# plot the BIC values to select the optimal number of states
BIC_plot2 <- ggplot(BIC_df2, aes(x = num_states, y = BIC_vals2)) +
geom_point() +
ggtitle("BIC Values for n = 2:10 Latent States Fitted HMM")
sort(statements_PC1_2_trimmed, PC1)
arrange(statements_PC1_2_trimmed, PC1)
statements_PCA_trimmed[,1]
statements_PCA_trimmed
class(statements_PCA_trimmed)
PC_df <- data.frame(statements_PCA_trimmed)
statements_PCA_trimmed$x
PC_df <- fortify(statements_PCA_trimmed)
install.packages("ggfortify")
library("ggfortify")
PC_df <- fortify(statements_PCA_trimmed)
head(PC_df)
View(PC_df)
statements_PCA
head(statements_PCA)
statements_PCA
statements_PCA$rotation
PC_df <- fortify(statements_PCA$rotation)
View(PC_df)
arrange(PC_df, PC1)
PC_df <- arrange(PC_df, PC1)
PC_df <- fortify(statements_PCA$rotation)
View(PC_df)
words <- row.names(PC_df)
PC_df <- arrange(PC_df, PC1)
PC_df <- cbind(words, PC_df)
View(PC_df)
PC_df <- fortify(statements_PCA$rotation)
words <- row.names(PC_df)
PC_df1 <- cbind(words, PC_df)
PC_df1 <- arrange(PC_df1, PC1)
View(PC_df1)
PC_df1[1,]
PC_df1[,1]
PC_df1[,1:50]
PC_df1[,1]
PC_df <- cbind(words, PC_df)
PC_df1 <- arrange(PC_df, PC1)
View(PC_df1)
PC_df2 <- arrange(PC_df, PC2)
View(PC_df2)
PC_df2[1,1]
PC_df2[[1]]
View(mc_mat)
mc_model <- MCMCglmm(state_y ~ state_x, random = NULL, data = mc_mat, family = "categorical", rcov = ~us(trait):units, random = ~us(trait+trait:xs):FARC_actions+ us(trait+trait:xs):pres_approve)
mc_model <- MCMCglmm(state_y ~ state_x, random = NULL, data = mc_mat, family = "categorical", rcov = ~us(trait):units)
summary(mc_model)
summary.MCMCglmm(mc_model)
View(mc_mat)
mc_mat <- state_maker(mc_mat)
View(mc_mat)
mc_mat <- dplyr::select(transition_chain, date, sentiment_level, side)
mc_mat <- state_maker(mc_mat)
View(mc_mat)
mc_model <- MCMCglmm(state_y ~ state_x, random = NULL, data = mc_mat, family = "categorical", rcov = ~us(trait):units)
pairwise_num
View(mc_mat)
mc_model <- MCMCglmm(state_y ~ state_x, random = NULL, data = mc_mat, family = "gaussian", rcov = ~us(trait):units)
mc_model <- MCMCglmm(state_y ~ state_x, random = NULL, data = mc_mat, family = "categorical", rcov = ~us(trait):units)
mc_model <- MCMCglmm(state_y ~ state_x, random = NULL, data = mc_mat, family = "poisson", rcov = ~us(trait):units)
mc_model <- MCMCglmm(state_y ~ state_x, random = NULL, data = mc_mat, family = "multinomial", rcov = ~us(trait):units)
mc_mat$year <- mc_mat$date[1:4]
foo <- "2001-01-01"
foo[1:4]
substr(foo, 1, 4)
mc_mat$year <- sapply(mc_mat$year, function(x) {substr(toString(x), 1, 4)})
mc_mat$year <- mc_mat$date
mc_mat$year <- sapply(mc_mat$year, function(x) {substr(toString(x), 1, 4)})
mc_model <- MCMCglmm(state_y ~ state_x, random = ~us(trait+trait:xs):year, data = mc_mat, family = "categorical", rcov = ~us(trait):units)
mc_model <- MCMCglmm(state_y ~ state_x, random = ~us(trait+trait:state_x):year, data = mc_mat, family = "categorical", rcov = ~us(trait):units)
mc_model <- MCMCglmm(state_y ~ state_x, random = ~year, data = mc_mat, family = "categorical", rcov = ~us(trait):units)
summary(mc_model)
mc_model <- MCMCglmm(state_y ~ state_x, random = ~year, thin = 100, data = mc_mat, family = "categorical", rcov = ~us(trait):units)
summary(mc_model)
mc_model <- MCMCglmm(state_y ~ state_x, random = ~year, thin = 10, data = mc_mat, family = "categorical", rcov = ~us(trait):units)
mc_model <- MCMCglmm(state_y ~ state_x, random = ~year, thin = 10, burnin = 100, data = mc_mat, family = "categorical", rcov = ~us(trait):units)
summary(mc_model)
mc_model <- MCMCglmm(state_y ~ state_x, random = ~year, thin = 10, burnin = 1000, data = mc_mat, family = "categorical", rcov = ~us(trait):units)
summary(mc_model)
summary(mc_model)
mc_model <- MCMCglmm(state_y ~ state_x, random = ~year, thin = 10, burnin = 3000, nitt = 10000, data = mc_mat, family = "categorical", rcov = ~us(trait):units)
summary(mc_model)
mc_model <- MCMCglmm(state_y ~ state_x, random = ~year, thin = 10, burnin = 3000, nitt = 50000, data = mc_mat, family = "categorical", rcov = ~us(trait):units)
summary(mc_model)
mc_model <- MCMCglmm(state_y ~ state_x, random = ~year, thin = 10, burnin = 3000, nitt = 100000, data = mc_mat, family = "categorical", rcov = ~us(trait):units)
summary(mc_model)
autocorr(mc_model)
autocorr(mc_model$VCV)
traceplot(mc_model)
plot(mc_model)
summary(mc_model)
mc_model <- MCMCglmm(state_y ~ state_x, random = ~year, thin = 10, burnin = 3000, nitt = 50000, data = mc_mat, family = "categorical", rcov = ~us(trait):units)
summary(mc_model)
mc_model <- MCMCglmm(state_y ~ state_x, random = ~year, thin = 10, burnin = 3000, nitt = 100000, data = mc_mat, family = "categorical", rcov = ~us(trait):units)
summary(mc_model)
mc_model <- MCMCglmm(state_y ~ state_x, random = ~year, thin = 10, burnin = 2000, nitt = 100000, data = mc_mat, family = "categorical", rcov = ~us(trait):units)
summary(mc_model)
mc_model <- MCMCglmm(state_y ~ state_x, random = ~year, thin = 10, burnin = 1000, nitt = 50000, data = mc_mat, family = "categorical", rcov = ~us(trait):units)
summary(mc_model)
mc_model <- MCMCglmm(state_y ~ state_x, random = ~year, thin = 10, burnin = 1000, nitt = 100000, data = mc_mat, family = "categorical", rcov = ~us(trait):units)
summary(mc_model)
mc_model <- MCMCglmm(state_y ~ state_x, random = ~year, thin = 10, burnin = 3000, nitt = 100000, data = mc_mat, family = "categorical", rcov = ~us(trait):units)
mc_model <- MCMCglmm(state_y ~ state_x, random = ~year, thin = 10, burnin = 2000, nitt = 100000, data = mc_mat, family = "categorical", rcov = ~us(trait):units)
priors <- list(R = list(V = diag(4), nu = 0.002)
priors <- list(R = list(V = diag(4), nu = 0.002))
priors <- list(R = list(V = diag(4), nu = 0.002))
mc_model <- MCMCglmm(state_y ~ state_x, priors = priors, random = ~year, thin = 10, burnin = 2000, nitt = 100000, data = mc_mat, family = "categorical", rcov = ~us(trait):units)
mc_model <- MCMCglmm(state_y ~ state_x, prior = priors, random = ~year, thin = 10, burnin = 2000, nitt = 100000, data = mc_mat, family = "categorical", rcov = ~us(trait):units)
priors <- list(
R = list(V = diag(4), nu = 0.002),
G = list(V = diag(4), nu = 0.002))
mc_model <- MCMCglmm(state_y ~ state_x, prior = priors, random = ~year, thin = 10, burnin = 2000, nitt = 100000, data = mc_mat, family = "categorical", rcov = ~us(trait):units)
priors <- list(
R = list(V = diag(4), nu = 0.002),
G = list(G1 = list(V = diag(4), nu = 0.002))
)
mc_model <- MCMCglmm(state_y ~ state_x, prior = priors, random = ~year, thin = 10, burnin = 2000, nitt = 100000, data = mc_mat, family = "categorical", rcov = ~us(trait):units)
priors <- list(
R = list(V = diag(4), nu = 0.002),
G = list(G1 = list(V = diag(1), nu = 0.002))
)
mc_model <- MCMCglmm(state_y ~ state_x, prior = priors, random = ~year, thin = 10, burnin = 2000, nitt = 100000, data = mc_mat, family = "categorical", rcov = ~us(trait):units)
priors <- list(
R = list(V = diag(4), nu = 0.002),
G = list(G1 = list(V = 1, nu = 0.002))
)
mc_model <- MCMCglmm(state_y ~ state_x, prior = priors, random = ~year, thin = 10, burnin = 2000, nitt = 100000, data = mc_mat, family = "categorical", rcov = ~us(trait):units)
priors <- list(
R = list(V = diag(4), nu = 0.002),
G = list(V = 1, nu = 0.002)
)
mc_model <- MCMCglmm(state_y ~ state_x, prior = priors, random = ~year, thin = 10, burnin = 2000, nitt = 100000, data = mc_mat, family = "categorical", rcov = ~us(trait):units)
priors <- list(
R = list(V = diag(4), nu = 0.002),
G = list(G1 = list(V = 1, nu = 0.002)))
)
# Run MCMC with year random effects
mc_model <- MCMCglmm(state_y ~ state_x, prior = priors, random = ~year, thin = 10, burnin = 2000, nitt = 100000, data = mc_mat, family = "categorical", rcov = ~us(trait):units)
priors <- list(
R = list(V = diag(3), nu = 0.002),
G = list(G1 = list(V = 1, nu = 0.002)))
mc_model <- MCMCglmm(state_y ~ state_x, prior = priors, random = ~year, thin = 10, burnin = 2000, nitt = 100000, data = mc_mat, family = "categorical", rcov = ~us(trait):units)
summary(mc_model)
mc_model <- MCMCglmm(state_y ~ state_x, prior = priors, random = ~year, thin = 10, burnin = 2000, nitt = 50000, data = mc_mat, family = "categorical", rcov = ~us(trait):units)
summary(mc_model)
mc_model <- MCMCglmm(state_y ~ state_x, prior = priors, random = ~year, thin = 10, burnin = 2000, nitt = 60000, data = mc_mat, family = "categorical", rcov = ~us(trait):units)
summary(mc_model)
mc_model <- MCMCglmm(state_y ~ state_x, prior = priors, random = ~year, thin = 10, burnin = 2000, nitt = 100000, data = mc_mat, family = "categorical", rcov = ~us(trait):units)
summary(mc_model)
mc_model <- MCMCglmm(state_y ~ state_x, prior = priors, random = ~year, thin = 10, burnin = 5000, nitt = 100000, data = mc_mat, family = "categorical", rcov = ~us(trait):units)
summary(mc_model)
mc_model <- MCMCglmm(state_y ~ state_x, prior = priors, random = ~year, thin = 10, burnin = 3000, nitt = 13000, data = mc_mat, family = "categorical", rcov = ~us(trait):units)
summary(mc_model)
mc_model <- MCMCglmm(state_y ~ state_x, prior = priors, random = ~year, thin = 10, burnin = 3000, nitt = 30000, data = mc_mat, family = "categorical", rcov = ~us(trait):units)
summary(mc_model)
mc_model <- MCMCglmm(state_y ~ state_x, prior = priors, random = ~year, thin = 10, burnin = 3000, nitt = 35000, data = mc_mat, family = "categorical", rcov = ~us(trait):units)
summary(mc_model)
mc_model <- MCMCglmm(state_y ~ state_x, prior = priors, random = ~year, thin = 10, burnin = 3000, nitt = 31000, data = mc_mat, family = "categorical", rcov = ~us(trait):units)
summary(mc_model)
mc_model <- MCMCglmm(state_y ~ state_x, prior = priors, random = ~year, thin = 10, burnin = 3000, nitt = 30000, data = mc_mat, family = "categorical", rcov = ~us(trait):units)
,summary(mc_model)
summary(mc_model)
mc_model <- MCMCglmm(state_y ~ state_x, prior = priors, random = ~year, thin = 10, burnin = 3000, nitt = 50000, data = mc_mat, family = "categorical", rcov = ~us(trait):units)
summary(mc_model)
mc_model <- MCMCglmm(state_y ~ state_x, prior = priors, random = ~year, thin = 10, burnin = 3000, nitt = 60000, data = mc_mat, family = "categorical", rcov = ~us(trait):units)
summary(mc_model)
mc_model <- MCMCglmm(state_y ~ state_x, prior = priors, random = ~year, thin = 10, burnin = 3000, nitt = 50000, data = mc_mat, family = "categorical", rcov = ~us(trait):units)
summary(mc_model)
mc_model <- MCMCglmm(state_y ~ state_x, prior = priors, random = ~year, thin = 10, burnin = 3000, nitt = 50000, data = mc_mat, family = "categorical", rcov = ~us(trait):units)
summary(mc_model)
mc_model <- MCMCglmm(state_y ~ state_x, prior = priors, random = ~year, thin = 10, burnin = 3000, nitt = 50000, data = mc_mat, family = "categorical", rcov = ~us(trait):units)
summary(mc_model)
mc_model <- MCMCglmm(state_y ~ state_x, prior = priors, random = ~year, thin = 10, burnin = 3000, nitt = 50000, data = mc_mat, family = "categorical", rcov = ~us(trait):units)
summary(mc_model)
mc_model <- MCMCglmm(state_y ~ state_x, prior = priors, random = ~year, thin = 10, burnin = 3000, nitt = 50000, data = mc_mat, family = "categorical", rcov = ~us(trait):units)
summary(mc_model)
mc_model <- MCMCglmm(state_y ~ state_x, prior = priors, random = ~year, thin = 10, burnin = 3000, nitt = 50000, data = mc_mat, family = "categorical", rcov = ~us(trait):units)
priors <- list(
R = list(V = diag(3), nu = 0.002, fix = 1),
G = list(G1 = list(V = 1, nu = 0.002)))
mc_model <- MCMCglmm(state_y ~ state_x, prior = priors, random = ~year, thin = 10, burnin = 3000, nitt = 50000, data = mc_mat, family = "categorical", rcov = ~us(trait):units)
summary(mc_model)
mc_model <- MCMCglmm(state_y ~ state_x, prior = priors, random = ~year, thin = 10, burnin = 3000, nitt = 50000, data = mc_mat, family = "categorical", rcov = ~us(trait):units)
summary(mc_model)
autocorr(mc_model$VCV)
plot(mc_model$VCV)
priors <- list(
R = list(V = diag(3), nu = 0.002, fix = 1, n = 2),
G = list(G1 = list(V = 1, nu = 0.002)))
# Run MCMC with year random effects
mc_model <- MCMCglmm(state_y ~ state_x, prior = priors, random = ~year, thin = 10, burnin = 3000, nitt = 50000, data = mc_mat, family = "categorical", rcov = ~us(trait):units)
summary(mc_model)
plot(mc_model$VCV)
View(mc_mat)
mc_mat <- add_monthlies(mc_mat)
View(mc_mat)
multinom(state_y ~ state_x + year, data = mc_mat)
View(mc_mat)
multinom(state_y ~ state_x + year, data = mc_mat, na.action = omit)
multinom(state_y ~ state_x + year, data = mc_mat, na.action = na.omit)
mc_mat$state_y2 <- relevel(mc_mat$state_y, ref = "farc_low")
mc_mat$state_y <- factor(mc_mat$state_y)
mc_mat$state_y2 <- relevel(mc_mat$state_y, ref = "farc_low")
mc_mat$state_y2 <- relevel(mc_mat$state_y, ref = "1")
mc_mat$state_y2 <- relevel(mc_mat$state_y, ref = "1")
multinom(state_y2 ~ state_x + year, data = mc_mat, na.action = na.omit)
mnl_mod <- multinom(state_y2 ~ state_x + year, data = mc_mat, na.action = na.omit)
summary(mnl_mod)
install.packages("mlogit")
library("mlogit")
mlogit(formula = state_y2 ~ state_x | year, data = mc_mat, shape = "long")
mlogit(formula = state_y2 ~ state_x + year, data = mc_mat, shape = "long", na.action = na.omit)
mlogit(formula = state_y2 ~ state_x + year, data = mc_mat, shape = "wide", na.action = na.omit)
mlogit(formula = state_y2 ~ state_x | year, data = mc_mat, shape = "wide", na.action = na.omit)
