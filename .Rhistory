opinion_cf = base_opinion +
ggtitle("Public Opinion and Ceasefires") +
geom_rect(aes(xmin=cf_start[1], xmax=cf_end[1], ymin=-Inf, ymax=Inf), fill = "yellow", linetype = 0, alpha = 0.01) +
geom_rect(aes(xmin=cf_start[2], xmax=cf_end[2], ymin=-Inf, ymax=Inf), fill = "yellow", linetype = 0, alpha = 0.01) +
geom_rect(aes(xmin=cf_start[3], xmax=cf_end[3], ymin=-Inf, ymax=Inf), fill = "yellow", linetype = 0, alpha = 0.01) +
geom_rect(aes(xmin=cf_start[4], xmax=cf_end[4], ymin=-Inf, ymax=Inf), fill = "yellow", linetype = 0, alpha = 0.01) +
geom_rect(aes(xmin=cf_start[5], xmax=cf_end[5], ymin=-Inf, ymax=Inf), fill = "yellow", linetype = 0, alpha = 0.01)
# public opinion and major events
opinion_major = base_opinion +
ggtitle("Major Events and Public Opinion Trends") +
geom_vline(data = filter(dates, group == "major_agree"), mapping = aes(xintercept = as.numeric(date), color = "Major agreement"), linetype = 2) +
geom_vline(data = filter(dates, group == "major_viol"), mapping = aes(xintercept = as.numeric(date), color = "Major violence"), linetype = 1)
# get breakdates in public opinion
opinion_breakd <- get_breakdate(break_finder(na.omit(public_op)), public_op)
#################################################################################
#################################################################################
# Results for demo
# Raw LIWC scores
View(FARC_raw)
View(govt_raw)
View(joint_raw)
# Loessed results
View(FARC_results)
View(govt_results)
View(joint_results)
# Violence, major events, public opinion data
View(monthly_viol)
View(dates)
View(public_op)
# View structural breaks, by type
View(neg_breaks)
View(pos_breaks)
View(pp3_breaks)
View(death_breaks)
# Structural breaks by party, with means of regimes.
# [[1]][[1]] to access the means,  [[1]][[2]] to get the corresponding breakdates
FARC_means
govt_means
joint_means
viol_means
# Base graphs (all loessed)
base_neg
base_pos
base_ellos
base_death
base_viol
base_opinion
# Graphs with ceasefires and major events
neg_cf
neg_major
pos_cf
pos_major
ellos_major
death_major
viol_major
viol_cf
opinion_cf
opinion_major
# Graphs with structural breaks
neg_breaks_gg
pos_breaks_gg
ellos_breaks_gg
death_breaks_gg
viol_breaks_gg
#################################################################################
#################################################################################
# Run hidden Markov model
# let's limit it to just 3 sentiment measures
FARC_results1 <- FARC_results[, -4]
FARC_results1 <- filter(FARC_results1, date >= "2012-01-01")
# formulas
forms1 <- list(FARC_results1$EmoNeg ~ 1, FARC_results1$EmoPos ~ 1, FARC_results1$Ellos ~ 1)
# Find the optimal number of states using BIC -- before fitting
num_states <- seq(2, 10, by = 1)
BIC_vals <- sapply(num_states, function(x) {BIC(depmix(forms1, family = list(gaussian(), gaussian(), gaussian()), nstates = x, data = FARC_results1))})
BIC_df <- data.frame(cbind(num_states, BIC_vals))
# plot the BIC values to select the optimal number of states
BIC_plot <- ggplot(BIC_df, aes(x = num_states, y = BIC_vals)) +
geom_point() +
ggtitle("BIC Values for n = 2:10 Latent States HMM")
# add the covariates: monthly violence
# Function takes 1 parameter: a dataframe, and returns one parameter: a dataframe
add_monthlies <- function(df) {
dates <- df["date"]
# add columns for the monthly data we're adding
col_names <- c("FARC_actions", "army_casualties", "pres_approve", "peace_approve")
df[, col_names] <- NA
for (i in 1:length(dates[[1]])) {
date <- dates[i, 1]
year <- format(date, "%Y")
month <- format(date, "%m")
monthly_date <- as.Date(paste(year, month, "01", sep = "-"))
# get the stats from violence and opinion dfs
viol <- filter(monthly_viol, date == monthly_date)
public <- filter(public_op, date == monthly_date)
# write them to new df
df["FARC_actions"][i, 1] <- as.numeric(viol[1])
df["army_casualties"][i, 1] <- as.numeric(viol[2])
df["pres_approve"][i, 1] <- as.numeric(public[1])
df["peace_approve"][i, 1] <- as.numeric(public[2])
}
return(df)
}
# run to add violence/public opinion levels to FARC df
FARC_results2 <- add_monthlies(FARC_results1)
govt_results1 <- add_monthlies(govt_results)
forms2 <- list(FARC_results2$EmoNeg ~ 1, FARC_results2$EmoPos ~ 1, FARC_results2$Ellos ~ 1)
# what are BIC values of the fitted models?
BIC_vals2 <- sapply(num_states, function(x) {BIC(fit(depmix(forms2, family = list(gaussian(), gaussian(), gaussian()), nstates = x, data = FARC_results2[,-(6:9)])))})
BIC_df2 <- data.frame(cbind(num_states, BIC_vals2))
# plot the BIC values to select the optimal number of states
BIC_plot2 <- ggplot(BIC_df2, aes(x = num_states, y = BIC_vals2)) +
geom_point() +
ggtitle("BIC Values for n = 2:10 Latent States Fitted HMM w/ Covariates")
# what are AIC values of the fitted models?
AIC_vals <- sapply(num_states, function(x) {AIC(fit(depmix(forms2, family = list(gaussian(), gaussian(), gaussian()), nstates = x, data = FARC_results2[,-(6:9)], transitions = list(~ FARC_actions, ~ army_casualties, ~ pres_approve, ~ peace_approve))))})
AIC_df <- data.frame(cbind(num_states, AIC_vals))
# plot the BIC values to select the optimal number of states
AIC_plot <- ggplot(AIC_df, aes(x = num_states, y = AIC_vals)) +
geom_point() +
ggtitle("AIC Values for n = 2:10 Latent States Fitted HMM w/ Covariates")
# run the model for states n = 3
mod <- depmix(forms2, family = list(gaussian(), gaussian(), gaussian()), nstates = 3, data = FARC_results2[,-(6:9)], transitions = list(~ FARC_actions, ~ army_casualties, ~ pres_approve, ~ peace_approve))
hmm_mod <- fit(mod)
summary(hmm_mod)
# what state are we in at a given time t?
head(posterior(hmm_mod)) # graph this later
#################################################################################
#################################################################################
# Transition model: sentiment-responds-to-sentiment
# Classify overall sentiment as "high" or "low": Compare negative and positive emotion proportions within a given document. 1 = high, 0 = low
FARC_results3 <- FARC_results
FARC_results3["sentiment_level"] <- as.numeric(FARC_results3$EmoNeg <= FARC_results3$EmoPos)
FARC_results3["side"] <- "FARC"
govt_results3 <- govt_results
govt_results3["side"] <- "govt"
govt_results3["sentiment_level"] <- as.numeric(govt_results3$EmoNeg <= govt_results3$EmoPos)
# combine them into one stream
transition_chain <- rbind(FARC_results3, govt_results3)
# and sort by date
transition_chain <- transition_chain[order(as.Date(transition_chain$date, format = "%Y-%m-%d")), ]
# and filter to the peace process
transition_chain <- filter(transition_chain, date > "2012-01-01")
# pairwise comparison to gauge "responsiveness": how often are the parties giving statements at t and t-1 different?
get_responsiveness <- function(df) {
# put boolean of pairwise comparisons here
vect <- rep(NA, (length(df[ , 1]) - 1))
for (i in 2:length(df[ , 1])) {
side_t <- df["side"][i, ]
side_t_1 <- df["side"][i-1, ]
vect[i] <- side_t == side_t_1
}
return(vect)
}
pairwise_responsiveness <- get_responsiveness(transition_chain)
#################################################################################
#################################################################################
# PCA analysis
FARC_corpus <- corpus(FARC$text, docvars = FARC_results$dates)
govt_corpus <- corpus(govt$text, docvars = govt_results$dates)
all_corpora <- FARC_corpus + govt_corpus
# docvars for inserting: sides and dates
sides <- c(rep("FARC", length(FARC_corpus[, 1])), rep("govt", length(govt_corpus[, 1])))
pca_dates <- c(FARC_results$date, govt_results$date)
# make dfm
all_dfm <- dfm(all_corpora, language = "spanish", stem = TRUE, ignoredFeatures = stopwords("spanish"))
# run PCA
statements_PCA <- prcomp(all_dfm, center = TRUE, scale. = TRUE)
summary(statements_PCA)
# plot it
plot(statements_PCA, type = "l", main="PCA of FARC and Govt Statements")
# first 2 PCs account for ~10% of variance. Could be better...
# create graph of PC1 and PC2
PC_graph <- ggbiplot(statements_PCA, obs.scale = 1, var.scale = 1, groups = sides)
PC_graph <- PC_graph + theme(legend.direction = "horizontal", legend.position = "top")
PC_graph
# Graph PC1 as a time series:
# collect date and side metadata with PC1 values
statements_PC1_2 <- data.frame(statements_PCA$x[1:length(statements_PCA$x[,1]),1:2])
statements_PC1_2["date"] <- pca_dates
statements_PC1_2["side"] <- sides
colnames(statements_PC1_2) <- c("PC1", "PC2", "date", "side")
PC1_gg <- ggplot(filter(statements_PC1_2, side == "FARC"), aes(x = as.Date(date, origin = "1970-01-01"), y = PC1, color = "FARC")) +
geom_jitter() +
geom_point(data = filter(statements_PC1_2, side == "govt"), aes(x = as.Date(date, origin = "1970-01-01"), y = PC1, color = "Govt")) +
ggtitle("Plot of First Principal Components over Time") +
scale_x_date(date_minor_breaks = "1 month",
limits = c(as.Date("2012-06-01", "%Y-%m-%d"), NA))
# Graph PC2
# collect date and side metadata with PC1 values
PC2_gg <- ggplot(filter(statements_PC1_2, side == "FARC"), aes(x = as.Date(date, origin = "1970-01-01"), y = PC2, color = "FARC")) +
geom_jitter() +
geom_point(data = filter(statements_PC1_2, side == "govt"), aes(x = as.Date(date, origin = "1970-01-01"), y = PC2, color = "Govt")) +
ggtitle("Plot of Second Principal Components over Time") +
scale_x_date(date_minor_breaks = "1 month",
limits = c(as.Date("2012-06-01", "%Y-%m-%d"), NA))
# FARC statement # 94 is an outlier. Let's try removing it, and rerun PCA
# trimmed_statements_PC1_2 <- filter(statements_PC1_2, PC2 < 231)
FARC_corpus_trimmed <- corpus(FARC$text[-94], docvars = FARC_results$dates[-94])
all_corpora_trimmed <- FARC_corpus_trimmed + govt_corpus
all_dfm_trimmed <- dfm(all_corpora_trimmed, language = "spanish", stem = TRUE, ignoredFeatures = stopwords("spanish"))
statements_PCA_trimmed <- prcomp(all_dfm_trimmed, center = TRUE, scale. = TRUE)
summary(statements_PCA_trimmed)
# plot it: still not great
plot(statements_PCA_trimmed, type = "l", main="PCA of FARC and Govt Statements")
statements_PC1_2_trimmed <- data.frame(statements_PCA_trimmed$x[1:length(statements_PCA_trimmed$x[,1]),1:2])
statements_PC1_2_trimmed["date"] <- pca_dates[-94]
statements_PC1_2_trimmed["side"] <- sides[-94]
colnames(statements_PC1_2_trimmed) <- c("PC1", "PC2", "date", "side")
# Plot PC1 time series
PC1_gg_trimmed <- ggplot(filter(statements_PC1_2_trimmed, side == "FARC"), aes(x = as.Date(date, origin = "1970-01-01"), y = PC1, color = "FARC")) +
geom_smooth(method = "loess", se = FALSE) +
geom_jitter() +
geom_point(data = filter(statements_PC1_2_trimmed, side == "govt"), aes(x = as.Date(date, origin = "1970-01-01"), y = PC1, color = "Govt")) +
geom_smooth(method = "loess", se = FALSE, data = statements_PC1_2_trimmed, aes(x = as.Date(date, origin = "1970-01-01"), y = PC1, color = "Govt")) +
ggtitle("Plot of First Principal Components over Time (Outlier Removed)") +
scale_x_date(date_minor_breaks = "1 month",
limits = c(as.Date("2012-06-01", "%Y-%m-%d"), NA)) +
labs(
x = "Date",
y = "PC1",
color = "Legend")
# Graph PC2
# collect date and side metadata with PC1 values
PC2_gg_trimmed <- ggplot(filter(statements_PC1_2_trimmed, side == "FARC"), aes(x = as.Date(date, origin = "1970-01-01"), y = PC2, color = "FARC")) +
geom_smooth(method = "loess", se = FALSE) +
geom_jitter() +
geom_point(data = filter(statements_PC1_2_trimmed, side == "govt"), aes(x = as.Date(date, origin = "1970-01-01"), y = PC2, color = "Govt")) +
geom_smooth(method = "loess", se = FALSE, data = statements_PC1_2_trimmed, aes(x = as.Date(date, origin = "1970-01-01"), y = PC2, color = "Govt")) +
ggtitle("Plot of Second Principal Components over Time (Outlier Removed)") +
scale_x_date(date_minor_breaks = "1 month",
limits = c(as.Date("2012-06-01", "%Y-%m-%d"), NA)) +
labs(
x = "Date",
y = "PC2",
color = "Legend")
#################################################################################
#################################################################################
# Robust PCA
rob_pca <- PcaHubert(all_dfm)
# First 2 components account for 65% of variance
print(rob_pca)
summary(rob_pca)
# plot
screeplot(rob_pca, type = "lines", main = "Robust PCA with 10 Components")
# let's plot the time series of PC1
rob_pc1 <- data.frame(rob_pca@scores)
rob_pc1 <- dplyr::select(rob_pc1, PC1)
rob_pc1["side"] <- sides
rob_pc1["date"] <- pca_dates
# Robust PC1 graph
PC1_gg_robust <- ggplot(filter(rob_pc1, side == "FARC"), aes(x = as.Date(date, origin = "1970-01-01"), y = PC1, color = "FARC")) +
geom_smooth(method = "loess", se = FALSE) +
geom_jitter() +
geom_point(data = filter(rob_pc1, side == "govt"), aes(x = as.Date(date, origin = "1970-01-01"), y = PC1, color = "Govt")) +
geom_smooth(method = "loess", se = FALSE, data = rob_pc1, aes(x = as.Date(date, origin = "1970-01-01"), y = PC1, color = "Govt")) +
ggtitle("Plot of First Principal Components over Time (Robust PCA)") +
scale_x_date(date_minor_breaks = "1 month",
limits = c(as.Date("2012-06-01", "%Y-%m-%d"), NA)) +
labs(
x = "Date",
y = "PC1",
color = "Legend")
pairwise_responsiveness
sum(transition_chain$sentiment_level)
length(transition_chain$sentiment_level)
FARC_results3 <- FARC_results
FARC_results3["sentiment_level"] <- as.numeric(2 * FARC_results3$EmoNeg <= FARC_results3$EmoPos)
FARC_results3["side"] <- "FARC"
govt_results3 <- govt_results
govt_results3["side"] <- "govt"
govt_results3["sentiment_level"] <- as.numeric(2 * govt_results3$EmoNeg <= govt_results3$EmoPos)
# combine them into one stream
transition_chain <- rbind(FARC_results3, govt_results3)
# and sort by date
transition_chain <- transition_chain[order(as.Date(transition_chain$date, format = "%Y-%m-%d")), ]
# and filter to the peace process
transition_chain <- filter(transition_chain, date > "2012-01-01")
# pairwise comparison to gauge "responsiveness": how often are the parties giving statements at t and t-1 different?
get_responsiveness <- function(df) {
# put boolean of pairwise comparisons here
vect <- rep(NA, (length(df[ , 1]) - 1))
for (i in 2:length(df[ , 1])) {
side_t <- df["side"][i, ]
side_t_1 <- df["side"][i-1, ]
vect[i] <- side_t == side_t_1
}
return(vect)
}
# how frequent are "responding pairs"?
pairwise_responsiveness <- get_responsiveness(transition_chain)
length(transition_chain$sentiment_level)
sum(transition_chain$sentiment_level)
sum(as.numeric(pairwise_responsiveness))
as.numeric(pairwise_responsiveness)
sum(as.numeric(pairwise_responsiveness))
class(as.numeric(pairwise_responsiveness))
pairwise_num <- as.numeric(pairwise_responsiveness)
sum(pairwise_num)
class(pairwise_num)
c(pairwise_num)
sum(c(pairwise_num))
pairwise_num <- sum(na.omit(as.numeric(pairwise_responsiveness)))
pairwise_num
pairwise_responsiveness
View(transition_chain)
get_responsiveness <- function(df) {
# put boolean of pairwise comparisons here
vect <- rep(NA, (length(df[ , 1]) - 1))
for (i in 2:length(df[ , 1])) {
side_t <- df["side"][i, ]
side_t_1 <- df["side"][i-1, ]
vect[i] <- side_t !== side_t_1
}
return(vect)
}
# how frequent are "responding pairs"?
pairwise_responsiveness <- get_responsiveness(transition_chain)
pairwise_num <- sum(na.omit(as.numeric(pairwise_responsiveness)))
pairwise_num
get_responsiveness <- function(df) {
# put boolean of pairwise comparisons here
vect <- rep(NA, (length(df[ , 1]) - 1))
for (i in 2:length(df[ , 1])) {
side_t <- df["side"][i, ]
side_t_1 <- df["side"][i-1, ]
vect[i] <- side_t != side_t_1
}
return(vect)
}
# how frequent are "responding pairs"?
pairwise_responsiveness <- get_responsiveness(transition_chain)
pairwise_num <- sum(na.omit(as.numeric(pairwise_responsiveness)))
pairwise_num
install.packages("MCMCglmm")
library(MCMCglmm)
load("/Users/lesliehuang/Desktop/dat.RData")
load("~/Desktop/dat.RData")
load("~/Desktop/dat.RData")
View(x)
View(x)
View(transition_chain)
mc_mat <- transition_chain["date":"side"]
mc_mat <- dplyr::select(transition_chain, date, sentiment_level, side)
View(mc_mat)
View(x)
View(x)
length(mc_mat)
length(mc_mat[,1])
mc_mat["side"][1]
mc_mat["side"][[1]]
mc_mat["side"][1,]
mc_mat["side"][2,]
state_maker <- function(df) {
df["state_x"] <- NA
for (i in 1:length(df[, 1])) {
if (df["side"][i, ] == "FARC") {
if (df["sentiment_level"][i, ] == 0) {
df["state_x"][i, ] <- 1
}
else {
df["state_x"][i, ] <- 2
}
}
if (df["side"][i, ] == "govt") {
df["state_x"][i, ] <- 3
}
else {
df["state_x"][i, ] <- 4
}
}
return(df)
}
}
mc_mat <- state_maker(mc_mat)
state_maker <- function(df) {
df["state_x"] <- NA
for (i in 1:length(df[, 1])) {
if (df["side"][i, ] == "FARC") {
if (df["sentiment_level"][i, ] == 0) {
df["state_x"][i, ] <- 1
}
else {
df["state_x"][i, ] <- 2
}
}
if (df["side"][i, ] == "govt") {
df["state_x"][i, ] <- 3
}
else {
df["state_x"][i, ] <- 4
}
}
return(df)
}
mc_mat <- state_maker(mc_mat)
state_maker <- function(df) {
df["state_x"] <- NA
for (i in 1:length(df[, 1])) {
if (df["side"][i, ] == "FARC") {
if (df["sentiment_level"][i, ] == 0) {
df["state_x"][i, ] <- 1
}
else {
df["state_x"][i, ] <- 2
}
}
else if (df["side"][i, ] == "govt") {
df["state_x"][i, ] <- 3
}
else {
df["state_x"][i, ] <- 4
}
}
return(df)
}
mc_mat <- state_maker(mc_mat)
filter(mc_mat, state_x == 4)
state_maker <- function(df) {
df["state_x"] <- NA
# fill in the appropriate states
for (i in 1:length(df[, 1])) {
if (df["side"][i, ] == "FARC") {
if (df["sentiment_level"][i, ] == 0) {
df["state_x"][i, ] <- 1
}
else {
df["state_x"][i, ] <- 2
}
}
else if (df["side"][i, ] == "govt") {
if (df["sentiment_level"][i, ] == 0) {
df["state_x"][i, ] <- 3
}
else {
df["state_x"][i, ] <- 4
}
}
df["state_y"]
return(df)
}
mc_mat <- state_maker(mc_mat)
filter(mc_mat, sentiment_level == 1, side == govt)
state_maker <- function(df) {
df["state_x"] <- NA
# fill in the appropriate states
for (i in 1:length(df[, 1])) {
# Divide FARC into states 1 and 2
if (df["side"][i, ] == "FARC") {
if (df["sentiment_level"][i, ] == 0) {
df["state_x"][i, ] <- 1
}
else {
df["state_x"][i, ] <- 2
}
}
# Divide govt into states 3 and 4
if (df["side"][i, ] == "govt") {
if (df["sentiment_level"][i, ] == 0) {
df["state_x"][i, ] <- 3
}
else {
df["state_x"][i, ] <- 4
}
}
}
df["state_y"] <- NA
for (i in 1:length(df[, 1]) -1) {
df["state_y"][i, ] <- df["state_x"][i+1, ]
}
return(df)
}
mc_mat <- state_maker(mc_mat)
View(add_monthlies)
View(add_monthlies)
mc_mat <- add_monthlies(mc_mat)
monthly_viol
mc_model <- MCMCglmm(y ~ x, random = NULL, data = mc_mat, family = "categorical")
mc_model <- MCMCglmm(state_y ~ state_x, random = NULL, data = mc_mat, family = "categorical")
mc_model <- MCMCglmm(state_y ~ trait:state_x, random = NULL, data = mc_mat, family = "categorical")
mc_model <- MCMCglmm(state_y ~ state_x, random = NULL, data = mc_mat, family = "categorical", rcov = ~us(trait):units)
summary(mc_model)
plot(mc_model$VCV)
G1=list(V = diag(6)*0.02, nu =7),
G2=list(V=diag(6)*0.02, nu=7)
)
)
#fit the model, note the thinning.
#(have wrapped code for presentation, but you may need to "unwrap" depending on
# on your R editor)
mod.mc.full <- MCMCglmm(ys~trait+trait:xs - 1, random=
~us(trait+trait:xs):debate+ us(trait+trait:xs):ministry,
rcov=~us(trait):units, family='categorical', data=dat.big, burnin=10000,
nitt=60000, pr=T, prior=priors, thin=100)
load("Users/lesliehuang/Desktop/dat.Rdata")
load("/Users/lesliehuang/Desktop/dat.Rdata")
priors <- list(R = list(V = diag(2), nu = 0.002, n=0, fix=1), G = list(G1=list(V = diag(6)*0.02, nu =7),G2=list(V=diag(6)*0.02, nu=7)))
mod.mc.full <- MCMCglmm(ys~trait+trait:xs - 1, random= ~us(trait+trait:xs):debate+ us(trait+trait:xs):ministry,  rcov=~us(trait):units, family='categorical', data=dat.big, burnin=10000, nitt=60000, pr=T, prior=priors, thin=100)
mod.mc.full <- MCMCglmm(ys~trait+trait:xs - 1, random= ~us(trait+trait:xs):debate+ us(trait+trait:xs):ministry,  rcov=~us(trait):units, family='categorical', data=dat, burnin=10000, nitt=60000, pr=T, prior=priors, thin=100)
dat <- load("/Users/lesliehuang/Desktop/dat.Rdata")
mod.mc.full <- MCMCglmm(ys~trait+trait:xs - 1, random= ~us(trait+trait:xs):debate+ us(trait+trait:xs):ministry,  rcov=~us(trait):units, family='categorical', data=dat, burnin=10000, nitt=60000, pr=T, prior=priors, thin=100)
mod.mc.full <- MCMCglmm(ys~trait+trait:xs - 1, random= ~us(trait+trait:xs):debate+ us(trait+trait:xs):ministry,  rcov=~us(trait):units, family='categorical', data=dat, burnin=10000, nitt=60000, pr=T, prior=priors, thin=100)
View(dat)
mod.mc.full <- MCMCglmm(ys~trait+trait:xs - 1, random= ~us(trait+trait:xs):debate+ us(trait+trait:xs):ministry,  rcov=~us(trait):units, family='categorical', data=x, burnin=10000, nitt=60000, pr=T, prior=priors, thin=100)
mod.mc.full <- MCMCglmm(ys~trait+trait:xs - 1, random= ~us(trait+trait:xs):debate+ us(trait+trait:xs):ministry,  rcov=~us(trait):units, family='categorical', data=x, burnin=100000, nitt=60000, pr=T, prior=priors, thin=1000)
log(statements_PC1_2_trimmed)
log(all_dfm_trimmed)
all_dfm_trimmed <- log(dfm(all_corpora_trimmed, language = "spanish", stem = TRUE, ignoredFeatures = stopwords("spanish")))
all_dfm_trimmed <- log(dfm(all_corpora_trimmed, language = "spanish", stem = TRUE, ignoredFeatures = stopwords("spanish")))
statements_PCA_trimmed <- prcomp(all_dfm_trimmed, center = TRUE, scale. = TRUE)
summary(statements_PCA_trimmed)
plot(statements_PCA_trimmed, type = "l", main="PCA of FARC and Govt Statements")
