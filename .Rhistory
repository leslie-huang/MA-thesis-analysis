for (i in 1:length(groups)) {
# get the breakdates for that type
breaks <- filter(df, group == groups[i])
# get the name of the type
senti_name <- groups[i]
# get the correct columns from the loess df, supplied as an argument to the function
data <- cbind(loessed["date"], loessed[senti_name])
# number of structural breaks
break_len <- length(breaks[[1]])
# IDs to return
IDs <- list(senti_name, breaks["date"])
# Case #1: 2 breaks, 3 regimes
if (break_len == 2) {
data1 <- filter(data, date < breaks[1,1])
mean1 <- mean(unlist(data1[senti_name]))
data2 <- filter(data, date >= breaks[1,1], date < breaks[2,1])
mean2 <- mean(unlist(data2[senti_name]))
data3 <- filter(data, date >= breaks[2,1])
mean3 <- mean(unlist(data3[senti_name]))
means <- c(mean1, mean2, mean3)
}
# Case #2: only 1 break, 2 regimes
else {
data1 <- filter(data, date < breaks[1,1])
mean1 <- mean(unlist(data1[senti_name]))
data2 <- filter(data, date >= breaks[1,1])
mean2 <- mean(unlist(data2[senti_name]))
means <- c(mean1, mean2)
}
listofmeans[[i]] <- list(IDs, means)
}
return(listofmeans)
}
#################################################################################
#################################################################################
# get all the means of regimes defined by structural breakpoints in emotion
FARC_means <- calculate_breakmeans(FARC_breaks_df, FARC_results)
govt_means <- calculate_breakmeans(govt_breaks_df, govt_results)
joint_means <- calculate_breakmeans(joint_breaks_df, joint_results)
neg_breaks_gg
pos_breaks_gg
ellos_breaks_gg
death_breaks_gg
#################################################################################
#################################################################################
# now let's do the same for structural breaks in the violence time series
# modified version of the breakmeans function
calculate_viol_breakmeans <- function(df, loessed) {
loessed <- na.omit(loessed)
df$group <- gsub("farc_action", "FARC_actions", df$group)
df$group <- gsub("casualties", "deaths_fuerzapublica", df$group)
# which types of sentiment have breaks?
groups <- distinct(df, group)$group
# list to contain the means for each sentiment
listofmeans <- vector("list", length(groups))
# for each type of sentiment
for (i in 1:length(groups)) {
# get the breakdates for that type
breaks <- filter(df, group == groups[i])
# get the name of the type
senti_name <- groups[i]
# get the correct columns from the loess df, supplied as an argument to the function
data <- cbind(loessed["date"], loessed[senti_name])
# IDs to return
IDs <- list(senti_name, breaks["date"])
data1 <- filter(data, date < breaks[1,1])
mean1 <- mean(unlist(data1[senti_name]))
data2 <- filter(data, date >= breaks[1,1], date < breaks[2,1])
mean2 <- mean(unlist(data2[senti_name]))
data3 <- filter(data, date >= breaks[2,1])
mean3 <- mean(unlist(data3[senti_name]))
means <- c(mean1, mean2, mean3)
listofmeans[[i]] <- list(IDs, means)
}
return(listofmeans)
}
viol_means <- calculate_viol_breakmeans(viol_breaks_list, monthly_viol)
#################################################################################
#################################################################################
# Introducing... public opinion
public_op <- read.csv("../MA-datasets/public opinion.csv", stringsAsFactors = FALSE)
public_op <- public_op[,1:3]
public_op$date <- as.Date(as.yearmon(public_op$date, "%Y-%m"))
public_op[,2:3] <- sapply(public_op[,2:3], function(x) { as.numeric(x)})
public_op <- subset(public_op, select = c(2:3, 1))
# graph it
base_opinion = ggplot(public_op, aes(x = as.Date(date, origin = "1970-01-01"), y = santos_positive_image, color = "Positive image of Pres. Santos")) +
geom_smooth(method = "loess", se = FALSE) +
geom_jitter() +
geom_point(data = public_op, aes(x = as.Date(date, origin = "1970-01-01"), y = approve_santos_decision_talks, color = "Approve of negotiations with guerrillas")) +
geom_smooth(method = "loess", se = FALSE, data = public_op, aes(x = as.Date(date, origin = "1970-01-01"), y = approve_santos_decision_talks, color = "Approve of negotiations with guerrillas")) +
labs(
x = "Date",
y = "Percent Approve/Positive Image",
color = "Legend") +
scale_x_date(date_minor_breaks = "1 month",
limits = c(as.Date("2012-01-01", "%Y-%m-%d"), NA)) +
ggtitle("Public Opinion")
# public opinion and ceasefires
opinion_cf = base_opinion +
ggtitle("Public Opinion and Ceasefires") +
geom_rect(aes(xmin=cf_start[1], xmax=cf_end[1], ymin=-Inf, ymax=Inf), fill = "yellow", linetype = 0, alpha = 0.01) +
geom_rect(aes(xmin=cf_start[2], xmax=cf_end[2], ymin=-Inf, ymax=Inf), fill = "yellow", linetype = 0, alpha = 0.01) +
geom_rect(aes(xmin=cf_start[3], xmax=cf_end[3], ymin=-Inf, ymax=Inf), fill = "yellow", linetype = 0, alpha = 0.01) +
geom_rect(aes(xmin=cf_start[4], xmax=cf_end[4], ymin=-Inf, ymax=Inf), fill = "yellow", linetype = 0, alpha = 0.01) +
geom_rect(aes(xmin=cf_start[5], xmax=cf_end[5], ymin=-Inf, ymax=Inf), fill = "yellow", linetype = 0, alpha = 0.01)
# public opinion and major events
opinion_major = base_opinion +
ggtitle("Major Events and Public Opinion Trends") +
geom_vline(data = filter(dates, group == "major_agree"), mapping = aes(xintercept = as.numeric(date), color = "Major agreement"), linetype = 2) +
geom_vline(data = filter(dates, group == "major_viol"), mapping = aes(xintercept = as.numeric(date), color = "Major violence"), linetype = 1)
# get breakdates in public opinion
opinion_breakd <- get_breakdate(break_finder(na.omit(public_op)), public_op)
#################################################################################
#################################################################################
# Function takes 1 parameter: a dataframe, and returns one parameter with monthly stats for violence and public opinion added: a dataframe
add_monthlies <- function(df) {
dates <- df["date"]
# add columns for the monthly data we're adding
col_names <- c("FARC_actions", "army_casualties", "pres_approve", "peace_approve")
df[, col_names] <- NA
for (i in 1:length(dates[[1]])) {
date <- dates[i, 1]
year <- format(date, "%Y")
month <- format(date, "%m")
monthly_date <- as.Date(paste(year, month, "01", sep = "-"))
# get the stats from violence and opinion dfs
viol <- filter(monthly_viol, date == monthly_date)
public <- filter(public_op, date == monthly_date)
# write them to new df
df["FARC_actions"][i, 1] <- as.numeric(viol[1])
df["army_casualties"][i, 1] <- as.numeric(viol[2])
df["pres_approve"][i, 1] <- as.numeric(public[1])
df["peace_approve"][i, 1] <- as.numeric(public[2])
}
return(df)
}
#################################################################################
#################################################################################
# Markov models
# Hidden Markov model: FARC
# let's limit it to just 2 sentiment measures
FARC_results1 <- FARC_results[, -(3:4)]
# number of states
num_states <- seq(1, 6, by = 1)
#################################################################################
#################################################################################
# What is the optimal number of states? We will optimize for
# (1) BIC, fitted model
# (2) AIC, fitted model
# (3) BIC, fitted model w/ covars
# (4) AIC, fitted model w/ covars
#################################################################################
# formulas for the model
forms1 <- list(FARC_results1$EmoNeg ~ 1, FARC_results1$EmoPos ~ 1)
# Optimize BIC vals for fitted model, no covars
BIC_vals1 <- sapply(num_states, function(x) {BIC(fit(depmix(forms1, family = list(gaussian(), gaussian()), nstates = x, data = FARC_results1)))})
BIC_df1 <- data.frame(cbind(num_states, BIC_vals1))
# plot the BIC values to select the optimal number of states
BIC_plot1 <- ggplot(BIC_df1, aes(x = num_states, y = BIC_vals1)) +
geom_point() +
ggtitle("BIC Values for n = 2:10 Latent States Fitted HMM")
BIC_plot1
# Optimize AIC vals for same fitted model
AIC_vals1 <- sapply(num_states, function(x) {AIC(fit(depmix(forms1, family = list(gaussian(), gaussian()), nstates = x, data = FARC_results1)))})
AIC_df1 <- data.frame(cbind(num_states, AIC_vals1))
# plot the AIC values to select the optimal number of states
AIC_plot1 <- ggplot(AIC_df1, aes(x = num_states, y = AIC_vals1)) +
geom_point() +
ggtitle("AIC Values for n = 2:10 Latent States Fitted HMM")
AIC_plot1
#################################################################################
#################################################################################
# now optimize for the government
govt_results1 <- govt_results[, -(3:4)]
forms1_govt <- list(govt_results1$EmoNeg ~ 1, govt_results1$EmoPos ~ 1)
BIC_vals1_govt <- sapply(num_states, function(x) {BIC(fit(depmix(forms1_govt, family = list(gaussian(), gaussian()), nstates = x, data = govt_results1)))})
AIC_vals1_govt <- sapply(num_states, function(x) {AIC(fit(depmix(forms1_govt, family = list(gaussian(), gaussian()), nstates = x, data = govt_results1)))})
#################################################################################
#################################################################################
# do the results differ when covariates are added?
# Run function to add violence/public opinion levels to FARC df
FARC_results2 <- add_monthlies(FARC_results1)
govt_results2 <- add_monthlies(govt_results)
# take the log of the monthly stats
FARC_results2[, 4:7] <- log(FARC_results2[, 4:7])
govt_results2[, 4:7] <- log(govt_results2[, 4:7])
BIC_vals_fitted <- sapply(num_states, function(x) {BIC(fit(depmix(forms1, family = list(gaussian(), gaussian()), nstates = x, transitions = list(~ FARC_actions, ~ pres_approve), data = FARC_results2)))})
AIC_vals_fitted <- sapply(num_states, function(x) {AIC(fit(depmix(forms1, family = list(gaussian(), gaussian()), nstates = x, transitions = list(~ FARC_actions, ~ pres_approve), data = FARC_results2)))})
BIC_vals_fitted_govt <- sapply(num_states, function(x) {BIC(fit(depmix(forms1_govt, family = list(gaussian(), gaussian()), nstates = x, transitions = list(~ FARC_actions, ~ pres_approve), data = govt_results2)))})
AIC_vals_fitted_govt <- sapply(num_states, function(x) {AIC(fit(depmix(forms1_govt, family = list(gaussian(), gaussian()), nstates = x, transitions = list(~ FARC_actions, ~ pres_approve), data = govt_results2)))})
## make a table for the paper
hmm_comparison <- data.frame(BIC_vals1, AIC_vals1, BIC_vals_fitted, AIC_vals_fitted, BIC_vals1_govt, AIC_vals1_govt, BIC_vals_fitted_govt, AIC_vals_fitted_govt)
colnames(hmm_comparison) <- c("BIC", "AIC", "BIC", "AIC", "BIC", "AIC", "BIC", "AIC")
stargazer(hmm_comparison, title="Comparison of Hidden Markov Models", column.labels=c("BIC", "AIC", "BIC", "AIC", "BIC", "AIC", "BIC", "AIC"), summary = FALSE, digits = 2, digit.separator = "")
#################################################################################
#################################################################################
# HMM wih 3 states
# for FARC: model w/o covars
hmm_F <- fit(depmix(forms1, family = list(gaussian(), gaussian()), nstates = 3, data = FARC_results1))
summary(hmm_F)
# what is the probability of being in a given state over time?
prob_HMM_F <- posterior(hmm_F)
# check that the rows sum to 1
rowSums(head(prob_HMM_F)[,2:4])
# plot probability of being in a state over time against the sentiment measures
colnames(prob_HMM_F) <- c("est_state", paste("P",1:3, sep="_state"))
prob_HMM_F <- cbind(FARC_results1, prob_HMM_F)
# what state are we in at a given time?
HMM_F_est_state_gg = ggplot(prob_HMM_F, aes(x = as.Date(date, origin = "1970-01-01"), y = est_state)) +
geom_step(color = "#000000") +
labs(
x = "",
y = "State",
color = "Legend") +
scale_x_date(date_minor_breaks = "1 month",
limits = c(as.Date("2012-09-01", "%Y-%m-%d"), NA)) +
scale_y_continuous(breaks = c(1, 2, 3)) +
ggtitle("Estimated Hardline/Moderate/Conciliatory States of FARC")
## then get the transition matrices over regimes
#################################################################################
## now do the same for the government
hmm_g <- fit(depmix(forms1_govt, family = list(gaussian(), gaussian()), nstates = 3, data = govt_results1))
summary(hmm_g)
# what is the probability of being in a given state over time?
prob_HMM_g <- posterior(hmm_g)
# check that the rows sum to 1
rowSums(head(prob_HMM_g)[,2:4])
# plot probability of being in a state over time against the sentiment measures
colnames(prob_HMM_g) <- c("est_state", paste("P",1:3, sep="_state"))
prob_HMM_g <- cbind(govt_results1, prob_HMM_g)
# what state are we in at a given time?
HMM_g_est_state_gg = ggplot(prob_HMM_g, aes(x = as.Date(date, origin = "1970-01-01"), y = est_state)) +
geom_step(color = "#000000") +
labs(
x = "",
y = "State",
color = "Legend") +
scale_x_date(date_minor_breaks = "1 month",
limits = c(as.Date("2012-09-01", "%Y-%m-%d"), NA)) +
scale_y_continuous(breaks = c(1, 2, 3)) +
ggtitle("Estimated Hardline/Moderate/Conciliatory States of Government")
HMM_F_est_state_gg
major_agree
major_violence
View(hmm_F)
View(prob_HMM_F)
all_dates
dates
dates <- rbind(data.frame(date = major_violence, group = "major_viol"), data.frame(date = major_agree, group = "major_agree"), data.frame(date = cf_start, group = "ceasefire_start"), data.frame(date = cf_end, group = "ceasefire_end"))
dates
stargazer(dates, title="Labeling states using major events", digits = 2, digit.separator = "")
stargazer(dates, title="Labeling states using major events", digits = 2, digit.separator = "", summary = FALSE)
filter(prob_HMM_F, est_state == 1)
filter(prob_HMM_F, est_state == 1)$EmoNeg
mean(filter(prob_HMM_F, est_state == 1)$EmoNeg)
sd(filter(prob_HMM_F, est_state == 1)$EmoNeg)
mean(filter(prob_HMM_F, est_state == 2)$EmoNeg)
mean(filter(prob_HMM_F, est_state == 3)$EmoNeg)
mean(filter(prob_HMM_F, est_state == 1)$EmoPos)
mean(filter(prob_HMM_F, est_state == 2)$EmoPos)
mean(filter(prob_HMM_F, est_state == 3)$EmoPos)
mean(filter(prob_HMM_F, est_state == 1)$EmoNeg)
mean(filter(prob_HMM_F, est_state == 1)$EmoPos)
mean(filter(prob_HMM_F, est_state == 2)$EmoNeg)
mean(filter(prob_HMM_F, est_state == 2)$EmoPos)
mean(filter(prob_HMM_F, est_state == 3)$EmoNeg)
mean(filter(prob_HMM_F, est_state == 3)$EmoPos)
mean_of_states <- function(df) {
n1 <- mean(filter(df, est_state == 1)$EmoNeg)
p1 <- mean(filter(df, est_state == 1)$EmoPos)
n2 <- mean(filter(df, est_state == 2)$EmoNeg)
p2 <- mean(filter(df, est_state == 2)$EmoPos)
n3 <- mean(filter(df, est_state == 3)$EmoNeg)
p3 <- mean(filter(df, est_state == 3)$EmoPos)
results <- c(n1, p1, n2, p2, n3, p3)
}
FARC_hmm_means <- mean_of_states(prob_HMM_F)
govt_hmm_means <- mean_of_states(prob_HMM_g)
govt_hmm_means
FARC_hmm_means
mean_of_states <- function(df) {
n1 <- mean(filter(df, est_state == 1)$EmoNeg)
p1 <- mean(filter(df, est_state == 1)$EmoPos)
n2 <- mean(filter(df, est_state == 2)$EmoNeg)
p2 <- mean(filter(df, est_state == 2)$EmoPos)
n3 <- mean(filter(df, est_state == 3)$EmoNeg)
p3 <- mean(filter(df, est_state == 3)$EmoPos)
sdn1 <- sd(filter(df, est_state == 1)$EmoNeg)
sdp1 <- sd(filter(df, est_state == 1)$EmoPos)
sdn2 <- sd(filter(df, est_state == 2)$EmoNeg)
sdp2 <- sd(filter(df, est_state == 2)$EmoPos)
sdn3 <- sd(filter(df, est_state == 3)$EmoNeg)
sdp3 <- sd(filter(df, est_state == 3)$EmoPos)
results <- c(n1, p1, n2, p2, n3, p3)
results_sd <- c(sdn1, sdp1, sdn2, sdp2, sdn3, sdp3)
return(results, results_sd)
}
FARC_hmm_means <- mean_of_states(prob_HMM_F)
mean_of_states <- function(df) {
n1 <- mean(filter(df, est_state == 1)$EmoNeg)
p1 <- mean(filter(df, est_state == 1)$EmoPos)
n2 <- mean(filter(df, est_state == 2)$EmoNeg)
p2 <- mean(filter(df, est_state == 2)$EmoPos)
n3 <- mean(filter(df, est_state == 3)$EmoNeg)
p3 <- mean(filter(df, est_state == 3)$EmoPos)
sdn1 <- sd(filter(df, est_state == 1)$EmoNeg)
sdp1 <- sd(filter(df, est_state == 1)$EmoPos)
sdn2 <- sd(filter(df, est_state == 2)$EmoNeg)
sdp2 <- sd(filter(df, est_state == 2)$EmoPos)
sdn3 <- sd(filter(df, est_state == 3)$EmoNeg)
sdp3 <- sd(filter(df, est_state == 3)$EmoPos)
results <- c(n1, p1, n2, p2, n3, p3)
results_sd <- c(sdn1, sdp1, sdn2, sdp2, sdn3, sdp3)
return(c(results, results_sd))
}
FARC_hmm_means <- mean_of_states(prob_HMM_F)
FARC_hmm_means
hmm_F <- fit(depmix(forms1, family = list(gaussian(), gaussian()), nstates = 3, data = FARC_results1))
summary(hmm_F)
# what is the probability of being in a given state over time?
prob_HMM_F <- posterior(hmm_F)
# check that the rows sum to 1
rowSums(head(prob_HMM_F)[,2:4])
# label the states with substantive labels based on mean sentiment
mean_of_states <- function(df) {
n1 <- mean(filter(df, est_state == 1)$EmoNeg)
p1 <- mean(filter(df, est_state == 1)$EmoPos)
n2 <- mean(filter(df, est_state == 2)$EmoNeg)
p2 <- mean(filter(df, est_state == 2)$EmoPos)
n3 <- mean(filter(df, est_state == 3)$EmoNeg)
p3 <- mean(filter(df, est_state == 3)$EmoPos)
sdn1 <- sd(filter(df, est_state == 1)$EmoNeg)
sdp1 <- sd(filter(df, est_state == 1)$EmoPos)
sdn2 <- sd(filter(df, est_state == 2)$EmoNeg)
sdp2 <- sd(filter(df, est_state == 2)$EmoPos)
sdn3 <- sd(filter(df, est_state == 3)$EmoNeg)
sdp3 <- sd(filter(df, est_state == 3)$EmoPos)
results <- c(n1, p1, n2, p2, n3, p3)
results_sd <- c(sdn1, sdp1, sdn2, sdp2, sdn3, sdp3)
return(cbind(results, results_sd))
}
FARC_hmm_means <- mean_of_states(prob_HMM_F)
# label the states with substantive labels based on mean sentiment
mean_of_states <- function(df) {
n1 <- mean(filter(df, est_state == 1)$EmoNeg)
p1 <- mean(filter(df, est_state == 1)$EmoPos)
n2 <- mean(filter(df, est_state == 2)$EmoNeg)
p2 <- mean(filter(df, est_state == 2)$EmoPos)
n3 <- mean(filter(df, est_state == 3)$EmoNeg)
p3 <- mean(filter(df, est_state == 3)$EmoPos)
sdn1 <- sd(filter(df, est_state == 1)$EmoNeg)
sdp1 <- sd(filter(df, est_state == 1)$EmoPos)
sdn2 <- sd(filter(df, est_state == 2)$EmoNeg)
sdp2 <- sd(filter(df, est_state == 2)$EmoPos)
sdn3 <- sd(filter(df, est_state == 3)$EmoNeg)
sdp3 <- sd(filter(df, est_state == 3)$EmoPos)
results <- c(n1, p1, n2, p2, n3, p3)
results_sd <- c(sdn1, sdp1, sdn2, sdp2, sdn3, sdp3)
return(cbind(results, results_sd))
}
FARC_hmm_means <- mean_of_states(prob_HMM_F)
mean_of_states <- function(df) {
n1 <- mean(filter(df, est_state == 1)$EmoNeg)
p1 <- mean(filter(df, est_state == 1)$EmoPos)
n2 <- mean(filter(df, est_state == 2)$EmoNeg)
p2 <- mean(filter(df, est_state == 2)$EmoPos)
n3 <- mean(filter(df, est_state == 3)$EmoNeg)
p3 <- mean(filter(df, est_state == 3)$EmoPos)
sdn1 <- sd(filter(df, est_state == 1)$EmoNeg)
sdp1 <- sd(filter(df, est_state == 1)$EmoPos)
sdn2 <- sd(filter(df, est_state == 2)$EmoNeg)
sdp2 <- sd(filter(df, est_state == 2)$EmoPos)
sdn3 <- sd(filter(df, est_state == 3)$EmoNeg)
sdp3 <- sd(filter(df, est_state == 3)$EmoPos)
results <- c(n1, p1, n2, p2, n3, p3)
results_sd <- c(sdn1, sdp1, sdn2, sdp2, sdn3, sdp3)
return(cbind(results, results_sd))
}
FARC_hmm_means <- mean_of_states(prob_HMM_F)
# for FARC: model w/o covars
hmm_F <- fit(depmix(forms1, family = list(gaussian(), gaussian()), nstates = 3, data = FARC_results1))
summary(hmm_F)
# what is the probability of being in a given state over time?
prob_HMM_F <- posterior(hmm_F)
# check that the rows sum to 1
rowSums(head(prob_HMM_F)[,2:4])
# label the states with substantive labels based on mean sentiment
mean_of_states <- function(df) {
n1 <- mean(filter(df, est_state == 1)$EmoNeg)
p1 <- mean(filter(df, est_state == 1)$EmoPos)
n2 <- mean(filter(df, est_state == 2)$EmoNeg)
p2 <- mean(filter(df, est_state == 2)$EmoPos)
n3 <- mean(filter(df, est_state == 3)$EmoNeg)
p3 <- mean(filter(df, est_state == 3)$EmoPos)
sdn1 <- sd(filter(df, est_state == 1)$EmoNeg)
sdp1 <- sd(filter(df, est_state == 1)$EmoPos)
sdn2 <- sd(filter(df, est_state == 2)$EmoNeg)
sdp2 <- sd(filter(df, est_state == 2)$EmoPos)
sdn3 <- sd(filter(df, est_state == 3)$EmoNeg)
sdp3 <- sd(filter(df, est_state == 3)$EmoPos)
results <- c(n1, p1, n2, p2, n3, p3)
results_sd <- c(sdn1, sdp1, sdn2, sdp2, sdn3, sdp3)
return(cbind(results, results_sd))
}
FARC_hmm_means <- mean_of_states(prob_HMM_F)
# label the states with substantive labels based on mean sentiment
mean_of_states <- function(df) {
n1 <- mean(filter(df, est_state == 1)$EmoNeg)
p1 <- mean(filter(df, est_state == 1)$EmoPos)
n2 <- mean(filter(df, est_state == 2)$EmoNeg)
p2 <- mean(filter(df, est_state == 2)$EmoPos)
n3 <- mean(filter(df, est_state == 3)$EmoNeg)
p3 <- mean(filter(df, est_state == 3)$EmoPos)
sdn1 <- sd(filter(df, est_state == 1)$EmoNeg)
sdp1 <- sd(filter(df, est_state == 1)$EmoPos)
sdn2 <- sd(filter(df, est_state == 2)$EmoNeg)
sdp2 <- sd(filter(df, est_state == 2)$EmoPos)
sdn3 <- sd(filter(df, est_state == 3)$EmoNeg)
sdp3 <- sd(filter(df, est_state == 3)$EmoPos)
results <- c(n1, p1, n2, p2, n3, p3)
results_sd <- c(sdn1, sdp1, sdn2, sdp2, sdn3, sdp3)
return(cbind(results, results_sd))
}
FARC_hmm_means <- mean_of_states(prob_HMM_F)
# plot probability of being in a state over time against the sentiment measures
colnames(prob_HMM_F) <- c("est_state", paste("P",1:3, sep="_state"))
prob_HMM_F <- cbind(FARC_results1, prob_HMM_F)
Q
# for FARC: model w/o covars
hmm_F <- fit(depmix(forms1, family = list(gaussian(), gaussian()), nstates = 3, data = FARC_results1))
summary(hmm_F)
# what is the probability of being in a given state over time?
prob_HMM_F <- posterior(hmm_F)
# check that the rows sum to 1
rowSums(head(prob_HMM_F)[,2:4])
# plot probability of being in a state over time against the sentiment measures
colnames(prob_HMM_F) <- c("est_state", paste("P",1:3, sep="_state"))
prob_HMM_F <- cbind(FARC_results1, prob_HMM_F)
# label the states with substantive labels based on mean sentiment
mean_of_states <- function(df) {
n1 <- mean(filter(df, est_state == 1)$EmoNeg)
p1 <- mean(filter(df, est_state == 1)$EmoPos)
n2 <- mean(filter(df, est_state == 2)$EmoNeg)
p2 <- mean(filter(df, est_state == 2)$EmoPos)
n3 <- mean(filter(df, est_state == 3)$EmoNeg)
p3 <- mean(filter(df, est_state == 3)$EmoPos)
sdn1 <- sd(filter(df, est_state == 1)$EmoNeg)
sdp1 <- sd(filter(df, est_state == 1)$EmoPos)
sdn2 <- sd(filter(df, est_state == 2)$EmoNeg)
sdp2 <- sd(filter(df, est_state == 2)$EmoPos)
sdn3 <- sd(filter(df, est_state == 3)$EmoNeg)
sdp3 <- sd(filter(df, est_state == 3)$EmoPos)
results <- c(n1, p1, n2, p2, n3, p3)
results_sd <- c(sdn1, sdp1, sdn2, sdp2, sdn3, sdp3)
return(cbind(results, results_sd))
}
FARC_hmm_means <- mean_of_states(prob_HMM_F)
FARC_hmm_means
hmm_all_means <- cbind(FARC_hmm_means, govt_hmm_means)
hmm_all_means
govt_hmm_means <- mean_of_states(prob_HMM_g)
hmm_all_means <- cbind(FARC_hmm_means, govt_hmm_means)
govt_hmm_means <- mean_of_states(prob_HMM_g)
hmm_all_means <- cbind(FARC_hmm_means, govt_hmm_means)
hmm_all_means
paste(mean(filter(prob_HMM_F, est_state == 1)$EmoNeg), " (", sd(filter(prob_HMM_F, est_state == 1)$EmoNeg), ")", collapse = "")
paste(mean(filter(prob_HMM_F, est_state == 1)$EmoNeg), " (", sd(filter(prob_HMM_F, est_state == 1)$EmoNeg), ")", collapse = "", sep = "")
round(mean(filter(prob_HMM_F, est_state == 1)$EmoNeg))
round(mean(filter(prob_HMM_F, est_state == 1)$EmoNeg), 2)
round(mean(filter(prob_HMM_F, est_state == 1)$EmoNeg), 4)
round(mean(filter(prob_HMM_F, est_state == 1)$EmoNeg), 3)
round(mean(filter(prob_HMM_F, est_state == 1)$EmoNeg), 2)
round(mean(filter(prob_HMM_F, est_state == 1)$EmoNeg), 3)
round(mean(filter(prob_HMM_F, est_state == 1)$EmoNeg), 4)
fixed(mean(filter(prob_HMM_F, est_state == 1)$EmoNeg), digits = 3)
trunc(mean(filter(prob_HMM_F, est_state == 1)$EmoNeg), prec = 3)
trunc(mean(filter(prob_HMM_F, est_state == 1)$EmoNeg), prec = 4)
trunc(mean(filter(prob_HMM_F, est_state == 1)$EmoNeg), prec = -2)
mean(filter(prob_HMM_F, est_state == 1)$EmoNeg, options(digits = 2))
hmm_all_means <- cbind(FARC_hmm_means, govt_hmm_means)
stargazer(hmm_all_means, summary = FALSE, digits = 3)
stargazer(hmm_all_means, summary = FALSE, digits = 4)
mean_of_states <- function(df) {
n1 <- mean(filter(df, est_state == 1)$EmoNeg)
p1 <- mean(filter(df, est_state == 1)$EmoPos)
n2 <- mean(filter(df, est_state == 2)$EmoNeg)
p2 <- mean(filter(df, est_state == 2)$EmoPos)
n3 <- mean(filter(df, est_state == 3)$EmoNeg)
p3 <- mean(filter(df, est_state == 3)$EmoPos)
sdn1 <- sd(filter(df, est_state == 1)$EmoNeg)
sdp1 <- sd(filter(df, est_state == 1)$EmoPos)
sdn2 <- sd(filter(df, est_state == 2)$EmoNeg)
sdp2 <- sd(filter(df, est_state == 2)$EmoPos)
sdn3 <- sd(filter(df, est_state == 3)$EmoNeg)
sdp3 <- sd(filter(df, est_state == 3)$EmoPos)
results <- c(n1, p1, n2, p2, n3, p3)
results_sd <- c(sdn1, sdp1, sdn2, sdp2, sdn3, sdp3)
return(cbind(results, results_sd))
}
FARC_hmm_means <- mean_of_states(prob_HMM_F)
FARC_hmm_means
govt_hmm_means <- mean_of_states(prob_HMM_g)
govt_hmm_means
stargazer(hmm_all_means, summary = FALSE, digits = 2)
stargazer(hmm_all_means, summary = FALSE, title = "Mean Sentiment Scores for Latent States")
stargazer(hmm_all_means, summary = FALSE, title = "Mean Sentiment Scores for Latent States", digits = 5)
stargazer(hmm_all_means, summary = FALSE, title = "Mean Sentiment Scores for Latent States", digits = 4)
stargazer(hmm_all_means, summary = FALSE, title = "Mean Sentiment Scores for Latent States", digits = 2)
stargazer(hmm_all_means, summary = FALSE, title = "Mean Sentiment Scores for Latent States")
FARC_hmm_means
govt_hmm_means
