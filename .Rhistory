return(df)
}
}
neg_breaks <- break_sorter(FARC_breaks_df, govt_breaks_df, joint_breaks_df, "neg_break")
pos_breaks <- break_sorter(FARC_breaks_df, govt_breaks_df, joint_breaks_df, "pos_break")
pp3_breaks <- break_sorter(FARC_breaks_df, govt_breaks_df, joint_breaks_df, "pp3_break")
death_breaks <- break_sorter(FARC_breaks_df, govt_breaks_df, joint_breaks_df, "death_break")
#################################################################################
#################################################################################
# Let's look at violence
# let's find the structural breaks ** ignore the "day"
viol_breaks <- get_breakdate(break_finder(monthly_viol), monthly_viol)
# Function to make list of violence breaks with categorical var for the measure of violence
convert_vbreaks <- function(listoflists) {
df <- as.data.frame(unlist(listoflists))
df$group <- NA
# now fill in by type
farc_actions <- rep("farc_action", length(listoflists[[1]]))
casualties <- rep("casualties", length(listoflists[[2]]))
desmovilizados <- rep("desmovilizados", length(listoflists[[3]]))
groups <- c(farc_actions, casualties, desmovilizados)
df$group <- groups
df <- na.omit(df)
colnames(df)[1] <- "date"
df$date <- as.Date(df$date, origin = "1970-01-01")
return(df)
}
# get structural breaks in violence trends for graphing
viol_breaks_list <- convert_vbreaks(viol_breaks)
#################################################################################
#################################################################################
# Comparison of means: let's look at the means before and after structural breaks
# Function to calculate means in each type of sentiment during "regimes" bounded by structural breaks. Takes two arguments: df of dates with a group ID of break type, and df of loess values. Returns one argument: list of lists of Sentiment Type, Breakdate, and Means
calculate_breakmeans <- function(df, loessed) {
# need to rename groups so they match up with columns in the loess df
df$group <- gsub("neg_break", "EmoNeg", df$group)
df$group <- gsub("pos_break", "EmoPos", df$group)
df$group <- gsub("pp3_break", "Ellos", df$group)
df$group <- gsub("death_break", "Muerte", df$group)
# which types of sentiment have breaks?
groups <- distinct(df, group)$group
# list to contain the means for each sentiment
listofmeans <- vector("list", length(groups))
# for each type of sentiment
for (i in 1:length(groups)) {
# get the breakdates for that type
breaks <- filter(df, group == groups[i])
# get the name of the type
senti_name <- groups[i]
# get the correct columns from the loess df, supplied as an argument to the function
data <- cbind(loessed["date"], loessed[senti_name])
# number of structural breaks
break_len <- length(breaks[[1]])
# IDs to return
IDs <- list(senti_name, breaks["date"])
# Case #1: 2 breaks, 3 regimes
if (break_len == 2) {
data1 <- filter(data, date < breaks[1,1])
mean1 <- mean(unlist(data1[senti_name]))
data2 <- filter(data, date >= breaks[1,1], date < breaks[2,1])
mean2 <- mean(unlist(data2[senti_name]))
data3 <- filter(data, date >= breaks[2,1])
mean3 <- mean(unlist(data3[senti_name]))
means <- c(mean1, mean2, mean3)
}
# Case #2: only 1 break, 2 regimes
else {
data1 <- filter(data, date < breaks[1,1])
mean1 <- mean(unlist(data1[senti_name]))
data2 <- filter(data, date >= breaks[1,1])
mean2 <- mean(unlist(data2[senti_name]))
means <- c(mean1, mean2)
}
listofmeans[[i]] <- list(IDs, means)
}
return(listofmeans)
}
#################################################################################
#################################################################################
# get all the means of regimes defined by structural breakpoints in emotion
FARC_means <- calculate_breakmeans(FARC_breaks_df, FARC_results)
govt_means <- calculate_breakmeans(govt_breaks_df, govt_results)
joint_means <- calculate_breakmeans(joint_breaks_df, joint_results)
#################################################################################
#################################################################################
# now let's do the same for structural breaks in the violence time series
# modified version of the breakmeans function
calculate_viol_breakmeans <- function(df, loessed) {
loessed <- na.omit(loessed)
df$group <- gsub("farc_action", "FARC_actions", df$group)
df$group <- gsub("casualties", "deaths_fuerzapublica", df$group)
# which types of sentiment have breaks?
groups <- distinct(df, group)$group
# list to contain the means for each sentiment
listofmeans <- vector("list", length(groups))
# for each type of sentiment
for (i in 1:length(groups)) {
# get the breakdates for that type
breaks <- filter(df, group == groups[i])
# get the name of the type
senti_name <- groups[i]
# get the correct columns from the loess df, supplied as an argument to the function
data <- cbind(loessed["date"], loessed[senti_name])
# IDs to return
IDs <- list(senti_name, breaks["date"])
data1 <- filter(data, date < breaks[1,1])
mean1 <- mean(unlist(data1[senti_name]))
data2 <- filter(data, date >= breaks[1,1], date < breaks[2,1])
mean2 <- mean(unlist(data2[senti_name]))
data3 <- filter(data, date >= breaks[2,1])
mean3 <- mean(unlist(data3[senti_name]))
means <- c(mean1, mean2, mean3)
listofmeans[[i]] <- list(IDs, means)
}
return(listofmeans)
}
viol_means <- calculate_viol_breakmeans(viol_breaks_list, monthly_viol)
#################################################################################
#################################################################################
# Introducing... public opinion
public_op <- read.csv("../MA-datasets/public opinion.csv", stringsAsFactors = FALSE)
public_op <- public_op[,1:3]
public_op$date <- as.Date(as.yearmon(public_op$date, "%Y-%m"))
public_op[,2:3] <- sapply(public_op[,2:3], function(x) { as.numeric(x)})
public_op <- subset(public_op, select = c(2:3, 1))
# get breakdates in public opinion
opinion_breakd <- get_breakdate(break_finder(na.omit(public_op)), public_op)
#################################################################################
#################################################################################
# Function takes 1 parameter: a dataframe, and returns one parameter with monthly stats for violence and public opinion added: a dataframe
add_monthlies <- function(df) {
dates <- df["date"]
# add columns for the monthly data we're adding
col_names <- c("FARC_actions", "army_casualties", "pres_approve", "peace_approve")
df[, col_names] <- NA
for (i in 1:length(dates[[1]])) {
date <- dates[i, 1]
year <- format(date, "%Y")
month <- format(date, "%m")
monthly_date <- as.Date(paste(year, month, "01", sep = "-"))
# get the stats from violence and opinion dfs
viol <- filter(monthly_viol, date == monthly_date)
public <- filter(public_op, date == monthly_date)
# write them to new df
df["FARC_actions"][i, 1] <- as.numeric(viol[1])
df["army_casualties"][i, 1] <- as.numeric(viol[2])
df["pres_approve"][i, 1] <- as.numeric(public[1])
df["peace_approve"][i, 1] <- as.numeric(public[2])
}
return(df)
}
# Classify overall sentiment as "high" or "low": Compare negative and positive emotion proportions within a given document. 1 = high, 0 = low
FARC_results3 <- FARC_results
FARC_results3["sentiment_level"] <- as.numeric(2 * FARC_results3$EmoNeg <= FARC_results3$EmoPos)
FARC_results3["side"] <- "FARC"
govt_results3 <- govt_results
govt_results3["side"] <- "govt"
govt_results3["sentiment_level"] <- as.numeric(2 * govt_results3$EmoNeg <= govt_results3$EmoPos)
# combine them into one stream
transition_chain <- rbind(FARC_results3, govt_results3)
# sort by date
transition_chain <- transition_chain[order(as.Date(transition_chain$date, format = "%Y-%m-%d")), ]
# filter dates to the peace process
transition_chain <- filter(transition_chain, date > "2012-01-01")
#################################################################################
# pairwise comparison to gauge "responsiveness": how often are the parties giving statements at t and t-1 different?
get_responsiveness <- function(df) {
# put boolean of pairwise comparisons here
vect <- rep(NA, (length(df[ , 1]) - 1))
for (i in 2:length(df[ , 1])) {
side_t <- df["side"][i, ]
side_t_1 <- df["side"][i-1, ]
vect[i] <- side_t != side_t_1
}
return(vect)
}
# how frequent are "responding pairs"?
pairwise_responsiveness <- get_responsiveness(transition_chain)
pairwise_num <- sum(na.omit(as.numeric(pairwise_responsiveness)))
pairwise_num
#################################################################################
# and the same for govt statements
govt <- read.csv("govtstatements.csv", stringsAsFactors = FALSE)
# LIWC estimates
govt_raw <- liwc_extractor(govt)
# loessed point estimates
govt_results <- liwc_loess(govt_raw)
# get the loess lines for plotting
govt_lines <- loess_lines(govt_raw)
#################################################################################
#################################################################################
# Find structural breakpoints
# Function to find breakpoints for each column of a dataframe. Takes one argument: a dataframe whose last column is the date
break_finder <- function(df) {
# make a list to contain the breakdates
break_obs <- vector("list", length(df) - 1)
# get breakpoints
for (i in 1:(length(df)-1) ) {
break_obs[i] <- (list(breakpoints(df[[i]] ~ 1)$breakpoints))
}
return(break_obs)
}
# Function to convert break obs to dates. Takes two arguments: a list of lists (shudder), and an original df
get_breakdate <- function(listoflists, df) {
# for each list of break obs
for (i in 1:length(listoflists)) {
# if it's not empty
if (!is.na(listoflists[i])) {
# get the observations
unlisted_obs <- unlist(listoflists[i])
dates_list <- vector("list", 0)
# and then for each of the observations
for (j in 1:length(unlisted_obs)) {
# get the date from the dataframe and add it to the list
current_date <- df$date[unlisted_obs[j]]
dates_list <- append(dates_list, current_date)
}
listoflists[i] <- list(dates_list)
}
}
return(listoflists)
}
FARC_breaks <- get_breakdate(break_finder(FARC_results), FARC_results)
govt_breaks <- get_breakdate(break_finder(govt_results), govt_results)
joint_breaks <- get_breakdate(break_finder(joint_results), joint_results)
# Now get the breakpoints into a list we can graph
# convert breaks to a df
convert_breaks <- function(listoflists) {
df <- as.data.frame(unlist(listoflists))
df$group <- NA
# now fill in by type
negs <- rep("neg_break", length(listoflists[[1]]))
poss <- rep("pos_break", length(listoflists[[2]]))
pp3 <- rep("pp3_break", length(listoflists[[3]]))
death <- rep("death_break", length(listoflists[[4]]))
groups <- c(negs, poss, pp3, death)
df$group <- groups
df <- na.omit(df)
colnames(df)[1] <- "date"
df$date <- as.Date(df$date, origin = "1970-01-01")
return(df)
}
# get the dataframes of breaks, sorted by F/G/J stream
FARC_breaks_df <- convert_breaks(FARC_breaks)
govt_breaks_df <- convert_breaks(govt_breaks)
joint_breaks_df <- convert_breaks(joint_breaks)
# Function to make dataframe of all breaks of a type (e.g. neg)
break_sorter <- function(a,b,c,d) {
df1 <- filter(a, group == d)
if (nrow(df1) != 0) {
df1$group <- "FARC"
}
df2 <- filter(b, group == d)
if (nrow(df2) != 0) {
df2$group <- "govt"
}
df3 <- filter(c, group == d)
if (nrow(df3) != 0) {
df3$group <- "joint"
}
df <- rbind(df1, df2, df3)
if (nrow(df) > 0) {
return(df)
}
}
neg_breaks <- break_sorter(FARC_breaks_df, govt_breaks_df, joint_breaks_df, "neg_break")
pos_breaks <- break_sorter(FARC_breaks_df, govt_breaks_df, joint_breaks_df, "pos_break")
pp3_breaks <- break_sorter(FARC_breaks_df, govt_breaks_df, joint_breaks_df, "pp3_break")
death_breaks <- break_sorter(FARC_breaks_df, govt_breaks_df, joint_breaks_df, "death_break")
#################################################################################
#################################################################################
# Let's look at violence
# let's find the structural breaks ** ignore the "day"
viol_breaks <- get_breakdate(break_finder(monthly_viol), monthly_viol)
# Function to make list of violence breaks with categorical var for the measure of violence
convert_vbreaks <- function(listoflists) {
df <- as.data.frame(unlist(listoflists))
df$group <- NA
# now fill in by type
farc_actions <- rep("farc_action", length(listoflists[[1]]))
casualties <- rep("casualties", length(listoflists[[2]]))
desmovilizados <- rep("desmovilizados", length(listoflists[[3]]))
groups <- c(farc_actions, casualties, desmovilizados)
df$group <- groups
df <- na.omit(df)
colnames(df)[1] <- "date"
df$date <- as.Date(df$date, origin = "1970-01-01")
return(df)
}
# get structural breaks in violence trends for graphing
viol_breaks_list <- convert_vbreaks(viol_breaks)
#################################################################################
#################################################################################
# Comparison of means: let's look at the means before and after structural breaks
# Function to calculate means in each type of sentiment during "regimes" bounded by structural breaks. Takes two arguments: df of dates with a group ID of break type, and df of loess values. Returns one argument: list of lists of Sentiment Type, Breakdate, and Means
calculate_breakmeans <- function(df, loessed) {
# need to rename groups so they match up with columns in the loess df
df$group <- gsub("neg_break", "EmoNeg", df$group)
df$group <- gsub("pos_break", "EmoPos", df$group)
df$group <- gsub("pp3_break", "Ellos", df$group)
df$group <- gsub("death_break", "Muerte", df$group)
# which types of sentiment have breaks?
groups <- distinct(df, group)$group
# list to contain the means for each sentiment
listofmeans <- vector("list", length(groups))
# for each type of sentiment
for (i in 1:length(groups)) {
# get the breakdates for that type
breaks <- filter(df, group == groups[i])
# get the name of the type
senti_name <- groups[i]
# get the correct columns from the loess df, supplied as an argument to the function
data <- cbind(loessed["date"], loessed[senti_name])
# number of structural breaks
break_len <- length(breaks[[1]])
# IDs to return
IDs <- list(senti_name, breaks["date"])
# Case #1: 2 breaks, 3 regimes
if (break_len == 2) {
data1 <- filter(data, date < breaks[1,1])
mean1 <- mean(unlist(data1[senti_name]))
data2 <- filter(data, date >= breaks[1,1], date < breaks[2,1])
mean2 <- mean(unlist(data2[senti_name]))
data3 <- filter(data, date >= breaks[2,1])
mean3 <- mean(unlist(data3[senti_name]))
means <- c(mean1, mean2, mean3)
}
# Case #2: only 1 break, 2 regimes
else {
data1 <- filter(data, date < breaks[1,1])
mean1 <- mean(unlist(data1[senti_name]))
data2 <- filter(data, date >= breaks[1,1])
mean2 <- mean(unlist(data2[senti_name]))
means <- c(mean1, mean2)
}
listofmeans[[i]] <- list(IDs, means)
}
return(listofmeans)
}
#################################################################################
#################################################################################
# get all the means of regimes defined by structural breakpoints in emotion
FARC_means <- calculate_breakmeans(FARC_breaks_df, FARC_results)
govt_means <- calculate_breakmeans(govt_breaks_df, govt_results)
joint_means <- calculate_breakmeans(joint_breaks_df, joint_results)
#################################################################################
#################################################################################
# now let's do the same for structural breaks in the violence time series
# modified version of the breakmeans function
calculate_viol_breakmeans <- function(df, loessed) {
loessed <- na.omit(loessed)
df$group <- gsub("farc_action", "FARC_actions", df$group)
df$group <- gsub("casualties", "deaths_fuerzapublica", df$group)
# which types of sentiment have breaks?
groups <- distinct(df, group)$group
# list to contain the means for each sentiment
listofmeans <- vector("list", length(groups))
# for each type of sentiment
for (i in 1:length(groups)) {
# get the breakdates for that type
breaks <- filter(df, group == groups[i])
# get the name of the type
senti_name <- groups[i]
# get the correct columns from the loess df, supplied as an argument to the function
data <- cbind(loessed["date"], loessed[senti_name])
# IDs to return
IDs <- list(senti_name, breaks["date"])
data1 <- filter(data, date < breaks[1,1])
mean1 <- mean(unlist(data1[senti_name]))
data2 <- filter(data, date >= breaks[1,1], date < breaks[2,1])
mean2 <- mean(unlist(data2[senti_name]))
data3 <- filter(data, date >= breaks[2,1])
mean3 <- mean(unlist(data3[senti_name]))
means <- c(mean1, mean2, mean3)
listofmeans[[i]] <- list(IDs, means)
}
return(listofmeans)
}
viol_means <- calculate_viol_breakmeans(viol_breaks_list, monthly_viol)
#################################################################################
#################################################################################
# Introducing... public opinion
public_op <- read.csv("../MA-datasets/public opinion.csv", stringsAsFactors = FALSE)
public_op <- public_op[,1:3]
public_op$date <- as.Date(as.yearmon(public_op$date, "%Y-%m"))
public_op[,2:3] <- sapply(public_op[,2:3], function(x) { as.numeric(x)})
public_op <- subset(public_op, select = c(2:3, 1))
# get breakdates in public opinion
opinion_breakd <- get_breakdate(break_finder(na.omit(public_op)), public_op)
#################################################################################
#################################################################################
# Function takes 1 parameter: a dataframe, and returns one parameter with monthly stats for violence and public opinion added: a dataframe
add_monthlies <- function(df) {
dates <- df["date"]
# add columns for the monthly data we're adding
col_names <- c("FARC_actions", "army_casualties", "pres_approve", "peace_approve")
df[, col_names] <- NA
for (i in 1:length(dates[[1]])) {
date <- dates[i, 1]
year <- format(date, "%Y")
month <- format(date, "%m")
monthly_date <- as.Date(paste(year, month, "01", sep = "-"))
# get the stats from violence and opinion dfs
viol <- filter(monthly_viol, date == monthly_date)
public <- filter(public_op, date == monthly_date)
# write them to new df
df["FARC_actions"][i, 1] <- as.numeric(viol[1])
df["army_casualties"][i, 1] <- as.numeric(viol[2])
df["pres_approve"][i, 1] <- as.numeric(public[1])
df["peace_approve"][i, 1] <- as.numeric(public[2])
}
return(df)
}
# Classify overall sentiment as "high" or "low": Compare negative and positive emotion proportions within a given document. 1 = high, 0 = low
FARC_results3 <- FARC_results
FARC_results3["sentiment_level"] <- as.numeric(2 * FARC_results3$EmoNeg <= FARC_results3$EmoPos)
FARC_results3["side"] <- "FARC"
govt_results3 <- govt_results
govt_results3["side"] <- "govt"
govt_results3["sentiment_level"] <- as.numeric(2 * govt_results3$EmoNeg <= govt_results3$EmoPos)
# combine them into one stream
transition_chain <- rbind(FARC_results3, govt_results3)
# sort by date
transition_chain <- transition_chain[order(as.Date(transition_chain$date, format = "%Y-%m-%d")), ]
# filter dates to the peace process
transition_chain <- filter(transition_chain, date > "2012-01-01")
#################################################################################
# pairwise comparison to gauge "responsiveness": how often are the parties giving statements at t and t-1 different?
get_responsiveness <- function(df) {
# put boolean of pairwise comparisons here
vect <- rep(NA, (length(df[ , 1]) - 1))
for (i in 2:length(df[ , 1])) {
side_t <- df["side"][i, ]
side_t_1 <- df["side"][i-1, ]
vect[i] <- side_t != side_t_1
}
return(vect)
}
# how frequent are "responding pairs"?
pairwise_responsiveness <- get_responsiveness(transition_chain)
pairwise_num <- sum(na.omit(as.numeric(pairwise_responsiveness)))
pairwise_num
# Let's get our dataset!!!!!!
mnl_df <- dplyr::select(transition_chain, date, sentiment_level, side)
# state_x = current state at t, state_y = next state at t+1
# State1 = FARC-low, State 2 = FARC-high, State 3 = govt-low, State 4 = govt-high
# Function takes 1 parameter: a df with "side" and "sentiment_level" variables
state_maker <- function(df) {
df["state_x"] <- NA
# fill in the appropriate states
for (i in 1:length(df[, 1])) {
# Divide FARC into states 1 and 2
if (df["side"][i, ] == "FARC") {
if (df["sentiment_level"][i, ] == 0) {
df["state_x"][i, ] <- 1
}
else {
df["state_x"][i, ] <- 2
}
}
# Divide govt into states 3 and 4
if (df["side"][i, ] == "govt") {
if (df["sentiment_level"][i, ] == 0) {
df["state_x"][i, ] <- 3
}
else {
df["state_x"][i, ] <- 4
}
}
}
df["state_y"] <- NA
for (i in 1:length(df[, 1]) -1) {
df["state_y"][i, ] <- df["state_x"][i+1, ]
}
return(df)
}
# Run function to create dataset
mnl_df <- state_maker(mnl_df)
# add the violence and public opinion stats to the dataset and then take log(x+1) because of zeroes
mnl_df <- add_monthlies(mnl_df)
mnl_df[6:9] <- log(mnl_df[6:9] + 1)
# add year for fixed effects
mnl_df$year <- mnl_df$date
mnl_df$year <- sapply(mnl_df$year, function(x) {substr(toString(x), 1, 4)})
mnl_df$year <- factor(mnl_df$year)
# factor and relevel
mnl_df$state_y <- factor(mnl_df$state_y)
mnl_df$state_x <- factor(mnl_df$state_x)
mnl_df$state_y2 <- relevel(mnl_df$state_y, ref = "1")
# Convert data to wide for mlogit pkg
ml_df <- mnl_df
ml_df <- mlogit.data(ml_df, choice = "state_y2", shape = "wide")
# Model #1 specification: base
ml_mod1 <- mlogit::mlogit(formula = state_y2 ~ 1 | state_x, data = ml_df, reflevel = "3")
summary(ml_mod1)
# Model #2 specification: base + year
ml_mod2 <- mlogit::mlogit(formula = state_y2 ~ 1 | state_x + year, data = ml_df, reflevel = "3")
# Model #3: base + covars
ml_mod3 <- mlogit::mlogit(formula = state_y2 ~ 1 | state_x + FARC_actions + peace_approve, data = ml_df, reflevel = "3")
# Model #4: base + year + covars
ml_mod4 <- mlogit::mlogit(formula = state_y2 ~ 1 | state_x + FARC_actions + peace_approve + year, data = ml_df, reflevel = "3")
# relative risk ratio
mod4_rrr <- exp(coef(ml_mod4))
# goodness of fit tests
# hmftest(ml_mod4, ml_mod1)
# predicted vals
mod4_fit <- fitted(ml_mod4, outcome = FALSE)
# need to get the dates with NAs dropped
mnl_df_dates <- filter(mnl_df, !is.na(FARC_actions), !is.na(peace_approve))$date
length(mnl_df_dates)
length(mod4_fit)
length(mod4_fit[,1])
